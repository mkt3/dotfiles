fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d"))

latex-mode

(begin "\\begin{" (s env) "}" r> n> "\\end{" (s env) "}")
(frac "\\frac{" p "}{" q "}")
(enumerate "\\begin{enumerate}\n\\item " r> n> "\\end{enumerate}")
(itemize "\\begin{itemize}\n\\item " r> n> "\\end{itemize}")

lisp-mode emacs-lisp-mode ;; Specify multiple modes

(lambda "(lambda (" p ")" n> r> ")")

emacs-lisp-mode

(autoload ";;;###autoload")
(pt "(point)")
(lambda "(lambda (" p ")" n> r> ")")
(var "(defvar " p "\n  \"" p "\")")
(local "(defvar-local " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(alias "(defalias '" p " '" p ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(iflet "(if-let (" p ")" n> r> ")")
(whenlet "(when-let (" p ")" n> r> ")")
(whilelet "(while-let (" p ")" n> r> ")")
(andlet "(and-let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pcase "(pcase " (p "scrutinee") n "(" q "))" >)
(let "(let (" p ")" n> r> ")")
(let* "(let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")
(loop "(cl-loop for " p " in " p " do" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
(advice "(defun " (p "adv" name) " (&rest app)" n> p n> "(apply app))" n>
        "(advice-add #'" (p "fun") " " (p ":around") " #'" (s name) ")")
(provide "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
         ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name))) " ends here" n)

org-mode

(quote "#+begin_quote" n> r> n> "#+end_quote")
(example "#+begin_example" n> r> n> "#+end_example")
(comment "#+begin_comment" n> r> n> "#+end_comment")
(verse "#+begin_verse" n> r> n> "#+end_verse")
(src "#+begin_src " p n> r> n> "#+end_src" :post (org-edit-src-code))
(python "#+begin_src python" n> r> n> "#+end_src" :post (org-edit-src-code))
(shl "#+begin_src shell" n> r> n> "#+end_src" :post (org-edit-src-code))
(elisp "#+begin_src emacs-lisp" n> r> n> "#+end_src" :post (org-edit-src-code))

bash-ts-mode

(shebang "#!/usr/bin/env bash" n n "set -eu" n "set -o pipefail" n q)
(if "if [ " p " ]" n "  then " p n "fi" q)
(ife "if [ " p " ]" n "  then " p n "else" p n "fi" q)
(cs "case " p " in" n> p " )" n> p n> ";;" n> q n "esac)")
(fr "for " p " in " p n "do" n> q n "done")

python-ts-mode

(ifm "if __name__ == '__main__':" n> p)
(init "def __init__(self" p "):" n> p)
(defaultdict "from collections import defaultdict")
(dd "from collections import defaultdict")
(itr "import itertools" n> "list(itertools.chain.from_iterable(" p "))")

toml-ts-mode

(pyright "[tool.pyright]" n "exclude = [\".venv\"]" n "venvPath = \".\"" n "venv = \".venv\"" n "include = [\"src\"]")
(rtx-python "[tools]" n "python = {version='3.xx.x', virtualenv='.venv'}" n n "[env]" n "PYTHONPATH = \".\"" )

;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
