-*- buffer-read-only: t -*-
#+title: Configurations for Emacs
#+author: Makoto Morinaga
#+startup: content
#+startup: nohideblocks

* Header
 #+begin_src emacs-lisp
   ;;; README.el --- init file for Emacs -*- coding: utf-8 ; lexical-binding: t -*-

   ;; Copyright (C) 2023 Makoto Morinaga

   ;; Author: Makoto Morinaga <makoto@mkt3.dev>

   ;;; Code:
 #+end_src
* Custom
  #+begin_src emacs-lisp
    (setq custom-file (locate-user-emacs-file "custom.el"))
  #+end_src
* Packages
** Package manager
   #+begin_src emacs-lisp
     (eval-and-compile
       (customize-set-variable
        'package-archives '(("org" . "https://orgmode.org/elpa/")
                            ("melpa" . "https://melpa.org/packages/")
                            ("gnu" . "https://elpa.gnu.org/packages/")
                            ("nongnu" . "https://elpa.nongnu.org/nongnu/"))
        )
       (package-initialize)

       (setq use-package-hook-name-suffix nil)
       (use-package delight :ensure t))
   #+end_src
** Auto package update
   #+begin_src emacs-lisp
     (use-package auto-package-update
       :ensure t
       :config
       (setq auto-package-update-delete-old-versions t)
       (setq auto-package-update-hide-results t)
       (auto-package-update-maybe))
   #+end_src
* Initialize
** Load Path
   #+begin_src emacs-lisp
     (use-package exec-path-from-shell
       :ensure t
       :if (display-graphic-p)
       :config
       (setq exec-path-from-shell-arguments  "") ;; Since the UI is set to interactive in .zshrc.
       (setq exec-path-from-shell-variables  '("PATH" "GOPATH" "NAME" "ORG_HUGO" "RUSTUP_HOME" "CARGO_HOME" "SSH_AUTH_SOCK" "SSH_AGENT_PID" "GNUPGHOME" "PASSWORD_STORE_DIR" "GPG_KEY_ID"))
       (exec-path-from-shell-initialize))
   #+end_src
** Constant
   #+begin_src emacs-lisp
     (defconst my:d:nextcloud (expand-file-name "Nextcloud" (getenv "HOME")))
     (defconst my:d:org (expand-file-name "orgnotes" my:d:nextcloud))
     (defconst my:d:org-gtd (expand-file-name "gtd" my:d:org))
     (defconst my:d:org-roam (expand-file-name "roam" my:d:org))
     (defconst my:f:bib (expand-file-name "zotero/zotero.bib" my:d:nextcloud))
     (defconst my:d:org-hugo (getenv "ORG_HUGO"))
     (defconst my:d:password-store (or (getenv "PASSWORD_STORE_DIR") ""))
   #+end_src
* Builtin config
** scroll
   #+begin_src emacs-lisp
     (setq scroll-preserve-screen-position t
           scroll-margin 5
           scroll-conservatively 1
           next-screen-context-lines 5
           pixel-scroll-precision-mode 1)
   #+end_src
** symlink
   Automatically visit symlink sources
   #+begin_src emacs-lisp
     (use-package vc-hooks :custom (vc-follow-symlinks t))
     (setq-default find-file-visit-truename t)
     #+end_src
** tab
   #+begin_src emacs-lisp
     (setq-default
      indent-tabs-mode nil
      tab-width 4
      tab-always-indent t)
   #+end_src
** Truncate line
   #+begin_src emacs-lisp
     (setq truncate-lines nil
           truncate-partial-width-windows nil)

     (use-package word-wrap-mode
       :hook (visual-line-mode-hook . word-wrap-whitespace-mode)
       :config
       (add-to-list 'word-wrap-whitespace-characters ?\]))

     (use-package adaptive-wrap
       :ensure t
       :hook (((markdown-mode-hook org-mode-hook nov-mode-hook) . visual-line-mode)
              (visual-line-mode-hook . adaptive-wrap-prefix-mode)))
   #+end_src
** Delete
   Delete selection if you insert.
   #+begin_src emacs-lisp
     (bind-key "C-h" 'delete-backward-char)
     (bind-key "C-x ?" 'help-command)
     (use-package delsel
       :custom
       (delete-selection-mode t))
   #+end_src
** Assigning directory name to the same buffer name
   #+begin_src emacs-lisp
     (use-package uniquify
       :custom
       (uniquify-buffer-name-style  'post-forward-angle-brackets)
       (uniquify-min-dir-content  1)
       (funiquify-ignore-buffers-re  "*[^*]+*"))
   #+end_src
** Save various history
   #+begin_src emacs-lisp
     (use-package savehist
       :custom
       (savehist-autosave-interval 60)
       (history-delete-duplicates t)
       (history-length 1000)
       (savehist-additional-variables '(kill-ring
                                        search-ring
                                        regexp-search-ring
                                        file-name-history
                                        read-expression-history
                                        command-history
                                        extended-command-history))
       :config
       (savehist-mode))
   #+end_src
** Line number
   #+begin_src emacs-lisp
     (use-package display-line-numbers
       :config
       (global-display-line-numbers-mode))
   #+end_src
** Disable auto generate file
   #+begin_src emacs-lisp
     (use-package files
       :custom ((make-backup-files nil)
                (auto-save-default nil)))
   #+end_src
** Time
   #+begin_src emacs-lisp
     (use-package time
       :custom
       (display-time-string-forms  '(month "/" day "(" dayname ") " 24-hours ":" minutes))
       (display-time-mode t))
   #+end_src
** Auto revert
   #+begin_src emacs-lisp
     (use-package autorevert
       :delight auto-revert-mode
       :custom
       (auto-revert-interval 0.1)
       :config
       (global-auto-revert-mode))
   #+end_src
** Parentheses
   #+begin_src emacs-lisp
     (use-package paren
       :custom-face (show-paren-match . '((t
                                           (:weight regular
                                                    :background "#44475a"
                                                    :underline "$ffff00"))))
       :custom
       (show-paren-delay 0.0)
       (show-paren-mode t))
   #+end_src
** Window
   #+begin_src emacs-lisp
     (bind-key* "C-x |" 'split-window-right)
     (bind-key* "C-x -" 'split-window-below)
     (bind-key* "C-x x" 'delete-window)
     (use-package windmove
       :custom
       (windmove-wrap-around  t)
       :bind (("C-M-h" . windmove-left)
              ("C-M-k" . windmove-up)
              ("C-M-j" . windmove-down)
              ("C-M-l" . windmove-right)))
   #+end_src
** Save file browsing history
   #+begin_src emacs-lisp
     (use-package recentf
       :init
       (setq recentf-exclude '(".recentf"
                               "^/tmp\\.*"
                               "bookmarks"
                               "\\.gpg"
                               "\\.*.calendar.ics"))
       :config
       (recentf-mode))
   #+end_src
** Save last cursor position
   #+begin_src emacs-lisp
     (use-package saveplace
       :custom
       (save-place-mode t))

   #+end_src
** Encrypting/decrypting
   #+begin_src emacs-lisp
     (use-package epg
       :custom
       (epg-pinentry-mode 'loopback)
       :config
       ;; https://www.reddit.com/r/emacs/comments/14t3jcb/anyone_seen_if_gnupg_243_encryption_with_emacs/
       (fset 'epg-wait-for-status 'ignore))

     (use-package epa
       :after epg
       :config
       (require 'epa-file)
       (epa-file-enable)
       )

     (use-package password-store :ensure t)

     (use-package plstore
       :if (file-directory-p my:d:password-store)
       :mode (("\\.plist\\'" . plstore-mode))
       :custom
       (plstore-encrypt-to (getenv "GPG_KEY_ID"))
       :config
       (setq store (plstore-open (expand-file-name "plstore.plist" my:d:password-store))))

     (use-package auth-source
       :if (file-directory-p my:d:password-store)
       :custom
       (auth-source-gpg-encrypt-to (getenv "GPG_KEY_ID"))
       :config
       (add-to-list 'auth-sources (expand-file-name "plstore.plist" my:d:password-store)))
   #+end_src
** Server
   #+begin_src emacs-lisp
     (when (and (not (server-running-p))
                (display-graphic-p))
       (server-start))
   #+end_src
** Misc
   #+begin_src emacs-lisp
     (setq
      use-short-answers t
      debug-on-error nil
      create-lockfiles nil
      enable-recursive-minibuffers t
      ring-bell-function 'ignore
      text-quoting-style 'straight
      user-full-name (getenv "NAME"))
     (use-package simple
       :demand t
       :custom
       (kill-ring-max                100)
       (kill-read-only-ok            t)
       (eval-expression-print-length nil)
       (eval-expression-print-level  nil)
       (column-number-mode            t)
       :bind ("C-x j" . eval-print-last-sexp))
   #+end_src
* Appearance
** Color theme
*** ef-themes
    #+begin_src emacs-lisp
      (use-package ef-themes
        :ensure t
        :config
        (mapc #'disable-theme custom-enabled-themes)
        (load-theme 'ef-maris-dark :no-confirm)
        ;; (ef-themes-load-random 'dark)
        )
    #+end_src
*** Doom Nord
    #+begin_src emacs-lisp
      (use-package doom-themes
        :disabled
        :ensure t
        :config
        (load-theme 'doom-nord t))
    #+end_src
*** Modus theme
    #+begin_src emacs-lisp
      (use-package emacs
        :disabled
        :if (display-graphic-p)
        :config
        (require-theme 'modus-themes)
        (setq
         modus-themes-italic-constructs  t
         modus-themes-bold-constructs    t
         ;; modus-themes-org-blocks         'tinted-background
         modus-themes-org-blocks         'gray-background
         modus-themes-headings
         '((agenda-structure . (variable-pitch light 2.2))
           (agenda-date . (variable-pitch regular 1.3))
           (t . (regular 1.15))))
        (setq org-highlight-latex-and-related '(native))
        (load-theme 'modus-vivendi)
        ;; (load-theme 'modus-vivendi-tinted)
        )
    #+end_src
** Font
   #+begin_src emacs-lisp
     (when (display-graphic-p)
       (if (eq system-type 'darwin)
           (add-to-list 'default-frame-alist '(font . "PlemolJP-18"))
         (add-to-list 'default-frame-alist '(font . "PlemolJP-21"))))

     (use-package nerd-icons :ensure t)

     (use-package nerd-icons-dired
       :ensure t
       :hook (dired-mode-hook . nerd-icons-dired-mode))

     (use-package nerd-icons-completion
       :ensure t
       :after marginalia
       :config
       (nerd-icons-completion-mode)
       :hook (marginalia-mode-hook . #'nerd-icons-completion-marginalia-setup))

     (use-package nerd-icons-corfu
       :ensure t
       :after corfu
       :config
       (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
   #+end_src
** Highlight-indent-guide
   #+begin_src emacs-lisp
     (use-package highlight-indent-guides
       :ensure t
       :delight
       :hook ((prog-mode-hook yaml-mode-hook) . highlight-indent-guides-mode)
       :custom
       (highlight-indent-guides-method  'character)
       (highlight-indent-guides-auto-enabled t)
       (highlight-indent-guides-responsive t)
       (highlight-indent-guides-character ?\|))
   #+end_src
** rainbow-delimiters
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :hook ((prog-mode-hook . rainbow-delimiters-mode)))
   #+end_src
** Nyan mode
   #+begin_src emacs-lisp
     (use-package nyan-mode
       :ensure t
       :init
       (nyan-mode 1))
   #+end_src
** tab-bar-mode
   #+begin_src emacs-lisp
     (use-package tab-bar
       :init (defvar my:ctrl-q-map (make-sparse-keymap)
               "My original keymap binded to C-o.")
       (defalias 'my:ctrl-q-prefix my:ctrl-q-map)
       (define-key global-map (kbd "C-q") 'my:ctrl-q-prefix)
       (define-key my:ctrl-q-map (kbd "c")   'tab-new)
       (define-key my:ctrl-q-map (kbd "C-c") 'tab-new)
       (define-key my:ctrl-q-map (kbd "k")   'tab-close)
       (define-key my:ctrl-q-map (kbd "C-k") 'tab-close)
       (define-key my:ctrl-q-map (kbd "n")   'tab-next)
       (define-key my:ctrl-q-map (kbd "C-n") 'tab-next)
       (define-key my:ctrl-q-map (kbd "TAB") 'tab-next)
       (define-key my:ctrl-q-map (kbd "p")   'tab-previous)
       (define-key my:ctrl-q-map (kbd "C-p") 'tab-previous)
       (define-key my:ctrl-q-map (kbd "1") '(lambda () (interactive) (tab-bar-select-tab 1)))
       (define-key my:ctrl-q-map (kbd "2") '(lambda () (interactive) (tab-bar-select-tab 2)))
       (define-key my:ctrl-q-map (kbd "3") '(lambda () (interactive) (tab-bar-select-tab 3)))
       (define-key my:ctrl-q-map (kbd "4") '(lambda () (interactive) (tab-bar-select-tab 4)))
       (define-key my:ctrl-q-map (kbd "5") '(lambda () (interactive) (tab-bar-select-tab 5)))
       (define-key my:ctrl-q-map (kbd "6") '(lambda () (interactive) (tab-bar-select-tab 6)))
       (define-key my:ctrl-q-map (kbd "7") '(lambda () (interactive) (tab-bar-select-tab 7)))
       (define-key my:ctrl-q-map (kbd "8") '(lambda () (interactive) (tab-bar-select-tab 8)))
       (define-key my:ctrl-q-map (kbd "9") '(lambda () (interactive) (tab-bar-select-tab 9)))
       (define-key my:ctrl-q-map (kbd "0") '(lambda () (interactive) (tab-bar-select-tab 0)))

       (defun my:tab-bar-tab-name-truncated ()
         "Custom: Generate tab name from the buffer of the selected window."
         (let ((tab-name (buffer-name (window-buffer (minibuffer-selected-window))))
               (ellipsis (cond (tab-bar-tab-name-ellipsis)
                               ((char-displayable-p ?…) "…")
                               ("..."))))
           (if (< (length tab-name) tab-bar-tab-name-truncated-max)
               (format "%-12s" tab-name)
             (propertize (truncate-string-to-width tab-name tab-bar-tab-name-truncated-max nil
                                                   nil ellipsis) 'help-echo tab-name))))
       :custom
       (tab-bar-close-button-show      nil)
       (tab-bar-close-last-tab-choice  nil)
       (tab-bar-close-tab-select       'left)
       (tab-bar-history-mode           nil)
       (tab-bar-new-tab-choice         "*scratch*")
       (tab-bar-new-button-show        nil)
       (tab-bar-tab-name-function      'my:tab-bar-tab-name-truncated)
       (tab-bar-tab-name-truncated-max 12)
       (tab-bar-separator              "")
       :config
       (setq tab-bar-select-tab-modifiers '(meta))
       (setq tab-bar-tab-hints t)
       (tab-bar-mode +1))
   #+end_src
** dimmer
   Visually highlight the selected buffer.
   #+begin_src emacs-lisp
     (use-package dimmer
       :ensure t
       :custom
       (dimmer-fraction  0.5)
       (dimmer-exclusion-regexp-list  '(".*Minibuf.*" ".*which-key.*" ".*NeoTree.*"
                                        ".*Messages.*" ".*Async.*" ".*Warnings.*" ".*LV.*"
                                        ".*Ilist.*"))
       (dimmer-mode t))
   #+end_src
** Whitespace
   #+begin_src emacs-lisp
     (use-package whitespace
       :ensure t
       :demand t
       :delight
       :bind ("C-c W" . whitespace-cleanup)
       :custom
       (whitespace-style '(face trailing tabs spaces empty space-mark tab-mark))
       (whitespace-display-mappings '((space-mark ?\u3000 [?\u25a1])
                                      (tab-mark ?\t [?\u00BB ?\t]
                                                [?\\ ?\t])))
       (whitespace-space-regexp  "\\(\u3000+\\)")
       (whitespace-global-modes  '(not dired-mode tar-mode magit-mode))
       (global-whitespace-mode t)
       (whitespace-action '(auto-cleanup))
       :config
       (set-face-attribute 'whitespace-trailing nil
                           :background "Black"
                           :foreground "DeepPink"
                           :underline t)
       (set-face-attribute 'whitespace-tab nil
                           :background "Black"
                           :foreground "LightSkyBlue"
                           :underline t)
       (set-face-attribute 'whitespace-space nil
                           :background "Black"
                           :foreground "GreenYellow"
                           :weight 'bold)
       (set-face-attribute 'whitespace-empty nil
                           :background "Black"))
   #+end_src
* UI
** Clipboard
   #+begin_src emacs-lisp
     (use-package emacs
       :bind ("M-w" . region-to-clipboard)
       :config
       (defun yank-to-clipboard ()
         "Copy the most recently killed text to the system clipboard with OSC 52."
         (interactive)
         (let ((base64_text (base64-encode-string (encode-coding-string (substring-no-properties (nth 0 kill-ring)) 'utf-8) t)))
           (send-string-to-terminal (format "\033]52;c;%s\a" base64_text))))

       (defun region-to-clipboard ()
         "Copy the selected region to both the kill-ring and clipboard with OSC 52."
         (interactive)
         (if (region-active-p)
             (let* ((selected-text (buffer-substring-no-properties (region-beginning) (region-end)))
                    (base64_text (base64-encode-string (encode-coding-string selected-text 'utf-8) t)))
               (if (display-graphic-p)
                   (clipboard-kill-ring-save (region-beginning) (region-end))
                 (kill-new selected-text)
                 (send-string-to-terminal (format "\033]52;c;%s\a" base64_text))))
           (message "No region selected."))))
   #+end_src
** Wayland / x11
   #+begin_src emacs-lisp
     (when (memq  window-system '(pgtk x))
       (setq x-super-keysym 'meta))
   #+end_src
** mac
   #+begin_src emacs-lisp
     (use-package mac
       :when (eq 'mac window-system)
       :custom
       (mac-control-modifier 'control)
       (mac-option-modifier 'super)
       (mac-command-modifier 'meta)
       (mac-right-control-modifier. 'control)
       (mac-right-option-modifier 'hyper)
       (mac-right-command-modifier'meta))
   #+end_src
** ns
   #+begin_src emacs-lisp
     (use-package ns
       :if (eq 'ns window-system)
       :custom
       (ns-control-modifier 'control)
       (ns-option-modifier 'super)
       (ns-command-modifier 'meta)
       (ns-right-control-modifier 'control)
       (ns-right-option-modifier 'hyper)
       (ns-right-command-modifier 'meta)
       (ns-function-modifier 'super))
   #+end_src
** language
   #+begin_src emacs-lisp
     (use-package mule
       :init
       (set-language-environment "Japanese")
       (prefer-coding-system 'utf-8))
   #+end_src
** skk
   #+begin_src emacs-lisp
     (use-package ddskk
       :ensure t
       :demand t
       :bind* ("C-j" . skk-kakutei)
       :bind ("C-\\". skk-kakutei) ;; for ctrl-j from wezterm
       :custom
       (default-input-method "japanese-skk")
       (skk-byte-compile-init-file t)
       :init
       (setq skk-user-directory (expand-file-name "ddskk.d" user-emacs-directory))
       (setq skk-init-file (expand-file-name "init.el" skk-user-directory ))
       (when (file-directory-p my:d:nextcloud)
         (setq skk-jisyo (cons (expand-file-name "personal_config/skk/ddskk/skk-jisyo.utf8" my:d:nextcloud) 'utf-8))
         )
       (setq viper-mode nil)
       :config
       ;; Change marker
       ;; https://github.com/skk-dev/ddskk/issues/162
       (defun skk-set-display-table ()
         (walk-windows (lambda (w)
                         (let ((disptab (make-display-table)))
                           (aset disptab ?\▼ (vector (make-glyph-code ?＃ 'escape-glyph)))
                           (aset disptab ?\▽ (vector (make-glyph-code ?＠ 'escape-glyph)))
                           (set-window-display-table w disptab)))))
       (add-hook 'window-configuration-change-hook #'skk-set-display-table)
       (add-hook 'after-init-hook #'skk-set-display-table))
   #+end_src
** smartparens
   #+begin_src emacs-lisp
     (use-package smartparens
       :ensure t
       :delight
       :hook (after-init-hook . smartparens-global-strict-mode)
       :custom
       (electric-pair-mode nil)
       :config
       (require 'smartparens-config))
      #+end_src
** Completion UI
*** vertico
     #+begin_src emacs-lisp
       (use-package vertico
         :ensure t
         :init
         (vertico-mode)
         :custom
         (vertico-count 20)
         (enable-recursive-minibufferst)
         (vertico-cycle t)
         :bind (nil
                :map vertico-map
                ("C-r" . vertico-previous)
                ("C-s" . vertico-next)))
       (use-package vertico-directory
         :ensure nil ;; part of vertico
         :after vertico
         :commands (vertico-directory-tidy)
         :bind (nil
                :map vertico-map
                ("RET" . vertico-directory-enter)
                ("C-l" . vertico-directory-up)))
     #+end_src
*** consult
    #+begin_src emacs-lisp
      (use-package consult
        :ensure t
        :demand t
        :init
        (defun my:consult-line
            (&optional
             at-point)
          (interactive "P")
          (if at-point (consult-line (thing-at-point 'symbol))
            (consult-line)))
        :custom
        (recentf-mode t)
        :bind (("C-s" . my:consult-line))
        :bind* (("C-c C-a" . consult-buffer)
                ("C-z" . consult-imenu)
                ([remap goto-line] . consult-goto-line)
                ([remap yank-pop] . consult-yank-pop)))

      (use-package consult-ghq
        :ensure t
        :after consult
        :bind* (("C-c [" . consult-ghq-switch-project)
                ("C-c ]" . consult-ghq-grep))
        :custom
        (consult-ghq-find-function #'consult-find)
        (consult-ghq-grep-function #'consult-grep))
    #+end_src
*** marginalia
    #+begin_src emacs-lisp
      (use-package marginalia
        :ensure t
        :init
        (marginalia-mode))
    #+end_src
*** orderless
    #+begin_src emacs-lisp
      (use-package orderless
        :ensure t
        :custom
        (completion-styles '(orderless basic))
        (completion-category-overrides '((file (styles . (partial-completion)))
                                         ;; (eglot (styles orderless+initialism))
                                         )))

    #+end_src
*** embark
    #+begin_src emacs-lisp
      (use-package embark
        :ensure t
        :bind ("C-." . embark-act))
      (use-package embark-consult
        :ensure t
        :hook
        (embark-collect-mode . consult-preview-at-point-mode))
    #+end_src
*** tempel
    #+begin_src emacs-lisp
      (use-package tempel
        :ensure t
        ;; :bind (nil
        ;;        :map tempel-map
        ;;        ("C-i" . tempel-next)
        ;;        )
        :init
        (defun tempel-setup-capf ()
          (setq-local completion-at-point-functions
                      (cons #'tempel-complete
                            completion-at-point-functions)))
        (add-hook 'prog-mode-hook 'tempel-setup-capf)
        (add-hook 'text-mode-hook 'tempel-setup-capf)
        (add-hook 'org-mode-hook 'tempel-setup-capf))
    #+end_src
*** corfu
    #+begin_src emacs-lisp
      (use-package corfu-terminal
        :ensure t
        :if (not (display-graphic-p))
        :config
        (corfu-terminal-mode +1))
      (use-package corfu
        :ensure t
        :custom ((corfu-auto t)
                 (corfu-auto-prefix 1)
                 (corfu-auto-delay 0)
                 (corfu-cycle t))
        :init
        (global-corfu-mode)
        (corfu-popupinfo-mode))

      (use-package cape
        :ensure t
        :init
        ;; Add `completion-at-point-functions', used by `completion-at-point'.
        (add-to-list 'completion-at-point-functions #'cape-file)
        (add-to-list 'completion-at-point-functions #'cape-dabbrev)
        ;;(add-to-list 'completion-at-point-functions #'cape-history)
        (add-to-list 'completion-at-point-functions #'cape-keyword)
        ;; (add-to-list 'completion-at-point-functions #'cape-tex)
        ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
        ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
        ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
        ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
        ;;(add-to-list 'completion-at-point-functions #'cape-dict)
        ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
        ;;(add-to-list 'completion-at-point-functions #'cape-line)
        :config
        (defun my/eglot-capf ()
          (setq-local completion-at-point-functions
                      (list (cape-super-capf
                             #'tempel-complete
                             #'eglot-completion-at-point)
                            #'cape-keyword
                            #'cape-dabbrev
                            #'cape-file)
                      ))
        (add-hook 'eglot-managed-mode-hook #'my/eglot-capf))
    #+end_src
** which-key
   #+begin_src emacs-lisp
     (use-package which-key
       :ensure t
       :delight
       :custom
       ((which-key-idle-delay  1)
        (which-key-replacement-alist  '(((nil . "Prefix Command") . (nil . "prefix"))
                                        ((nil . "\\`\\?\\?\\'") . (nil . "lambda"))
                                        (("<left>") . ("←"))
                                        (("<right>") . ("→"))
                                        (("<\\([[:alnum:]-]+\\)>") . ("\\1"))))
        (which-key-mode t)))
   #+end_src
** ace-window
   #+begin_src emacs-lisp
     (use-package ace-window
       :ensure t
       :bind ("C-x o" . ace-window)
       :custom
       (aw-keys '(?j ?k ?l ?i ?o ?h ?y ?u ?p))
       :custom-face
       (aw-leading-char-face . '((t
                                   (:height 4.0
                                            :foreground "#f1fa8c")))))
   #+end_src
** undo-tree
   #+begin_src emacs-lisp
     (use-package undo-tree
       :ensure t
       :demand t
       :delight
       :bind ("M-/" . undo-tree-redo)
       :custom
       (undo-tree-auto-save-history t)
       (undo-tree-history-directory-alist  `(("." . ,(concat user-emacs-directory
                                                             ".cache/undo-tree-hist/"))))
       :config
       (global-undo-tree-mode))
   #+end_src
** mwim
   #+begin_src emacs-lisp
     (use-package mwim
       :ensure t
       :bind (("C-a" . mwim-beginning-of-code-or-line)
              ("C-e" . mwim-end-of-code-or-line)))
   #+end_src
** dmacro
   #+begin_src emacs-lisp
     (use-package dmacro
       :ensure t
       :delight
       :custom
       (dmacro-key (kbd "C-t"))
       :config
       (global-dmacro-mode)
       )
   #+end_src
* Garbage collection
  #+begin_src emacs-lisp
    (use-package gcmh
      :ensure t
      :delight
      :custom
      (gcmh-verbose t)
      (gcmh-idle-delay 120)
      (gcmh-high-cons-threshold #x80000000)
      (garbage-collection-messages t)
      :config
      (gcmh-mode 1))
  #+end_src
* LSP
** lsp-mode
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :ensure t
       :commands (lsp lsp-deferred)
       :config
       (setq read-process-output-max (* 1024 1024))
       (defun my/lsp-ui-sideline--align (&rest lengths)
         "Align sideline string by LENGTHS from the right of the window."
         (+ (apply '+ lengths)
            (if (display-graphic-p) 6 2)))
       (advice-add 'lsp-ui-sideline--align :override #'my/lsp-ui-sideline--align)
       :custom ((lsp-completion-provider             :none)
                ;; (lsp-keymap-prefix                   "C-c l")
                (lsp-log-io                          t)
                ;; (lsp-eldoc-render-all               . t)
                (lsp-enable-snippet                  nil)
                (lsp-keep-workspace-alive            nil)
                (lsp-document-sync-method            2)
                (lsp-response-timeout                5)
                (lsp-headerline-breadcrumb-icons-enable  nil)
                (lsp-enable-file-watchers           nil))
       :hook (lsp-mode-hook . lsp-headerline-breadcrumb-mode))

     (use-package lsp-ui
       :ensure t
       :after lsp-mode
       :custom ((lsp-ui-doc-enable             t)
                (lsp-ui-doc-position           'at-point)
                (lsp-ui-doc-header             t)
                (lsp-ui-doc-include-signature  t)
                (lsp-ui-doc-max-width          150)
                (lsp-ui-doc-max-height         30)
                (lsp-ui-doc-use-childframe     nil)
                (lsp-ui-doc-use-webkit         nil)
                (lsp-ui-peek-enable            t)
                (lsp-ui-peek-peek-height       20)
                (lsp-ui-peek-list-width        50))
       :bind (nil
              :map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)
              :map lsp-mode-map
              ("C-c a" . lsp-execute-code-action)
              ;; ("C-c d" . lsp-ui-doc-mode)
              ;; ("C-c s" . lsp-ui-sideline-mode)
              )
       :hook ((lsp-mode-hook . lsp-ui-mode)))
   #+end_src

   #+begin_src emacs-lisp
     (use-package lsp-ltex
       :ensure t
       :disabled
       :init
       (defconst my-os-type
         (pcase system-type
           ('darwin "mac")
           ('gnu/linux "linux")
           (_ nil)))
       (defvar ltex-ls-version "16.0.0")
       (defvar ltex-ls-tar-file (expand-file-name (format "~/.config/emacs/.cache/lsp/ltex-ls-%s.tar.gz" ltex-ls-version)))
       (defvar ltex-ls-install-dir (file-name-as-directory (expand-file-name "~/.config/emacs/.cache/lsp/ltex-ls")))
       (unless (file-exists-p ltex-ls-install-dir)
         (let ((ltex-ls-url (format "https://github.com/valentjn/ltex-ls/releases/download/%s/ltex-ls-%s-%s-x64.tar.gz"
                                    ltex-ls-version ltex-ls-version my-os-type)))
           (make-directory ltex-ls-install-dir t)
           (message "Downloading ltex-ls...")
           (url-copy-file ltex-ls-url ltex-ls-tar-file)
           (message "Extracting ltex-ls...")
           (let ((default-directory ltex-ls-install-dir))
             (shell-command (format "tar xvfz %s" ltex-ls-tar-file)))
           (make-symbolic-link (concat ltex-ls-install-dir (format "ltex-ls-%s"  ltex-ls-version)) (concat ltex-ls-install-dir "latest") t)))
       (let ((my-ltex-user-rules-path (expand-file-name "personal_config/lsp-ltex" my:d:nextcloud)))
         (when (file-directory-p my-ltex-user-rules-path)
           (setq lsp-ltex-user-rules-path my-ltex-user-rules-path)))
       :hook (org-mode-hook . (lambda ()
                                (setq-local lsp-completion-enable nil)
                                (require 'lsp-ltex)
                                (lsp-deferred)))  ; or lsp-deferred
       )
   #+end_src
** eglot
   #+begin_src emacs-lisp
     (use-package eglot
       :bind (nil
              :map eglot-mode-map
              ("C-c a" . eglot-code-actions)))
   #+end_src
** Flymake
   #+begin_src emacs-lisp
     (use-package flymake
       :ensure t
       :bind (nil
              :map flymake-mode-map
              ("C-c C-p" . flymake-goto-prev-error)
              ("C-c C-n" . flymake-goto-next-error))
       :config
       (set-face-background 'flymake-errline "red4")
       (set-face-background 'flymake-warnline "DarkOrange"))
     (use-package flymake-diagnostic-at-point
       :ensure t
       :after flymake
       :config
       (add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode)
       (remove-hook 'flymake-diagnostic-functions 'flymake-proc-legacy-flymake))
   #+end_src
* Programming Languages
** General
*** tree-sitter
    #+begin_src emacs-lisp
      (use-package treesit-auto
        :ensure t
        :custom
        (treesit-font-lock-level 4)
        :config
        (setq treesit-auto-install 'prompt)
        (global-treesit-auto-mode))
    #+end_src
*** git
    #+begin_src emacs-lisp
      (use-package git-modes :ensure t)
      (use-package magit
        :ensure t
        :custom
        (magit-wip-mode t)
        :bind (("C-x g" . magit-status)
               ("C-x M-g" . magit-dispatch-popup)))
      (use-package magit-delta
        :ensure t
        :after magit
        :hook (magit-mode-hook))
    #+end_src
** languages
*** Shell Script
    #+begin_src emacs-lisp
      (use-package sh-script
        :hook (bash-ts-mode-hook . eglot-ensure))
    #+end_src
*** Python
    #+begin_src emacs-lisp
      (use-package python
        :custom (python-indent-guess-indent-offset-verbose . nil)
        :hook (python-ts-mode-hook . eglot-ensure))

      (use-package reformatter
        :hook
        (python-ts-mode-hook . ruff-format-on-save-mode)
        :config
        (reformatter-define ruff-format
          :program "ruff"
          :args `("format" "--stdin-filename" ,buffer-file-name "-")))

      (use-package flymake-ruff
        :ensure t
        :hook (eglot-managed-mode-hook . (lambda ()
                                           (when (derived-mode-p 'python-mode 'python-ts-mode)
                                             (flymake-ruff-load))))
        :config
        (setq flymake-ruff--default-configs '("ruff.toml" ".ruff.toml")))

      (use-package ruff-fix
        :vc (:url "https://github.com/mkt3/ruff-fix.el.git"
                  :branch "main")
        :hook (before-save-hook . ruff-fix-before-save))
    #+end_src
*** Rust
    #+begin_src emacs-lisp
      (use-package rust-mode
        :ensure t
        :custom rust-format-on-save t
        :hook (rust-ts-mode-hook . eglot-ensure))

      (use-package cargo
        :ensure t
        :hook (rust-ts-mode-hook . cargo-minor-mode))
    #+end_src
*** Lua
    #+begin_src emacs-lisp
      (use-package lua-mode
        :ensure t
        :custom (lua-indent-level 2))
    #+end_src
*** web
**** web-mode
     #+begin_src emacs-lisp
       (use-package web-mode
         :ensure t
         :mode ("\\.css\\'" "\\.p?html?\\'")
         :custom
         (web-mode-markup-indent-offset 2)
         (web-mode-css-indent-offset 2)
         (web-mode-code-indent-offset 2)
         (web-mode-comment-style 2)
         (web-mode-style-padding 1)
         (web-mode-script-padding 1)
         (web-mode-enable-auto-closing t)
         (web-mode-enable-auto-pairing t)
         (web-mode-auto-close-style 2)
         (web-mode-tag-auto-close-style 2)
         (indent-tabs-mode nil)
         (tab-width 2))
     #+end_src
*** typescript / JavaScript
**** node module path
     #+begin_src emacs-lisp
       (use-package  add-node-modules-path
         :ensure t
         :commands add-node-modules-path)
     #+end_src
**** jsx-mode
     #+begin_src emacs-lisp
       (use-package jtsx
         :vc (:url "https://github.com/llemaitre19/jtsx"
                   :branch "master")
         :mode (("\\.jsx?\\'" . jsx-mode)
                ("\\.tsx?\\'" . tsx-mode))
         :commands jtsx-install-treesit-language
         :hook ((jsx-mode . hs-minor-mode)
                (tsx-mode . hs-minor-mode))
         :custom
         (js-indent-level 2)
         (typescript-ts-mode-indent-offset 2)
         (jtsx-switch-indent-offset 0)
         (jtsx-indent-statement-block-regarding-standalone-parent nil)
         (jtsx-jsx-element-move-allow-step-out t)
         (jtsx-enable-jsx-electric-closing-element t)
         :config
         (defun jtsx-bind-keys-to-mode-map (mode-map)
           "Bind keys to MODE-MAP."
           (define-key mode-map (kbd "C-c C-j") 'jtsx-jump-jsx-element-tag-dwim)
           (define-key mode-map (kbd "C-c j o") 'jtsx-jump-jsx-opening-tag)
           (define-key mode-map (kbd "C-c j c") 'jtsx-jump-jsx-closing-tag)
           (define-key mode-map (kbd "C-c j r") 'jtsx-rename-jsx-element)
           (define-key mode-map (kbd "C-c <down>") 'jtsx-move-jsx-element-tag-forward)
           (define-key mode-map (kbd "C-c <up>") 'jtsx-move-jsx-element-tag-backward)
           (define-key mode-map (kbd "C-c C-<down>") 'jtsx-move-jsx-element-forward)
           (define-key mode-map (kbd "C-c C-<up>") 'jtsx-move-jsx-element-backward)
           (define-key mode-map (kbd "C-c C-S-<down>") 'jtsx-move-jsx-element-step-in-forward)
           (define-key mode-map (kbd "C-c C-S-<up>") 'jtsx-move-jsx-element-step-in-backward)
           (define-key mode-map (kbd "C-c j w") 'jtsx-wrap-in-jsx-element))

         (defun jtsx-bind-keys-to-jsx-mode-map ()
             (jtsx-bind-keys-to-mode-map jsx-mode-map))

         (defun jtsx-bind-keys-to-tsx-mode-map ()
             (jtsx-bind-keys-to-mode-map tsx-mode-map))

         (add-hook 'jsx-mode-hook 'jtsx-bind-keys-to-jsx-mode-map)
         (add-hook 'tsx-mode-hook 'jtsx-bind-keys-to-tsx-mode-map))
     #+end_src
**** typescript-mode
     #+begin_src emacs-lisp
       (use-package typescript-mode
         :ensure t
         :custom
         (typescript-indent-level 2)
         :hook (typescript-ts-mode-hook . (lambda ()
                                            (interactive)
                                            (add-node-modules-path)
                                            (eglot-ensure)
                                            )))
     #+end_src
** Markup Languages
*** Org
**** org-mode
     #+begin_src emacs-lisp
       (use-package org
         :bind (("C-c l" . org-store-link)
                :map org-mode-map
                ("C-c i t" . org-insert-structure-template)
                ("C-c C-'" . org-edit-special)
                :map org-src-mode-map
                ("C-c C-'" . org-edit-src-exit))
         :init
         (setq org-directory my:d:org)
         (setq org-latex-create-formula-image-program 'dvisvgm)
         :custom
         (org-startup-indent nil)
         ;; (org-startup-numerated t)
         (org-hide-leading-stars t)
         (org-return-follows-link t)
         (org-startup-truncated nil)
         (org-use-speed-commands t)
         (org-startup-with-latex-preview nil)
         (org-log-done 'time)
         (org-adapt-indentation t)
         (org-confirm-babel-evaluate nil)
         :config
         (advice-add 'org-edit-special :before (lambda (&rest args) (read-only-mode -1)))
         (defun my-enable-read-only ()
           "Enable read-only mode for certain conditions."
           (when (or (save-excursion
                       (goto-char (point-min))
                       (search-forward " -*- buffer-read-only: t -*-" nil t))
                     (and (buffer-file-name)
                          (string-match-p "/roam/config/" (buffer-file-name))))
             (read-only-mode 1)))
         (advice-add 'org-edit-src-exit :after #'my-enable-read-only)

         (org-babel-do-load-languages
          'org-babel-load-languages
          '((emacs-lisp . t)
            (python . t)
            (shell . t))))

       (use-package org-appear
         :ensure t
         :after org
         :hook (org-mode-hook . org-appear-mode)
         :custom
         (org-hide-emphasis-markers t)
         (org-appear-inside-latex   t)
         (org-appear-autosubmarkers t))

       (use-package org-web-tools
         :ensure t
         :bind
         ("C-c i l" . org-web-tools-insert-link-for-url))
     #+end_src
**** org gtd
     #+begin_src emacs-lisp
       (use-package vulpea
         :ensure t)

       (use-package org-agenda
         :after org
         :if (file-directory-p my:d:org-gtd)
         :bind (("C-c d" . org-agenda)
                ("C-c g" . gtd)
                :map org-mode-map
                ("C-c C-w" . my:org-refile))
         :init
         (defvar org-gtd-file (expand-file-name "gtd.org" my:d:org-gtd))
         (defun gtd ()
           (interactive)
           (find-file org-gtd-file))
         (run-at-time 0 (* 5 60)
                      (lambda ()
                        (start-process "copy-calendar" nil "bash" (expand-file-name "personal_config/calendar/copy_calendar.sh" my:d:nextcloud))))

         :custom
         (org-agenda-span 'day)
         (org-agenda-remove-tags t)
         (org-agenda-current-time-string "now ============")
         (org-agenda-todo-ignore-scheduled 'feature)
         (org-agenda-skip-deadline-prewarning-if-scheduled t)
         (org-todo-keywords '((sequence "TODO(t)" "IN PROGRESS(i)" "|" "DONE(d)")
                              (sequence "WAITING(w@/!)" "CANCELLED(c@/!)" "SOMEDAY(s)")
                              ))
         ;; (org-todo-keyword-faces '(("TODO" :foreground "red"
         ;;                            :weight bold)
         ;;                           ("IN PROGRESS" :foreground "cornflower blue"
         ;;                            :weight bold)
         ;;                           ("DONE" :foreground "green"
         ;;                            :weight bold)
         ;;                           ("WAITING" :foreground "orange"
         ;;                            :weight bold)
         ;;                           ("CANCELLED" :foreground "green"
         ;;                            :weight bold)))
         (org-habit-graph-column 43)
         :config
         ;; The following function is a slight customization, quoted from the link below.
         ;; https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html
         (add-to-list 'org-modules 'org-habit)
         (setq org-agenda-prefix-format
               '((agenda . " %i %(vulpea-agenda-category 17)%?-12t% s")
                 (todo . " %i %(vulpea-agenda-category 25) ")
                 (tags . " %i %(vulpea-agenda-category 17) ")
                 (search . " %i %(vulpea-agenda-category 17) ")))
         (defun vulpea-agenda-category (&optional len)
           (let* ((file-name (when buffer-file-name
                               (file-name-sans-extension
                                (file-name-nondirectory buffer-file-name))))
                  (title (vulpea-buffer-prop-get "title"))
                  (category (org-get-category))
                  (result
                   (or (if (and
                            title
                            (string-equal category file-name))
                           title
                         category)
                       "")))
             (if (numberp len)
                 (s-truncate len (s-pad-right len " " result))
               result)))
         (defun vulpea-todo-p ()
           "Return non-nil if current buffer has any todo entry.

         TODO entries marked as done are ignored, meaning the this
         function returns nil if current buffer contains only completed
         tasks."
           (seq-find
            (lambda (type)
              (eq type 'todo))
            (org-element-map
                (org-element-parse-buffer 'headline)
                'headline
              (lambda (h)
                (org-element-property :todo-type h)))))
         (defun vulpea-todo-update-tag ()
           "Update todo tag in the current buffer."
           (when (and (not (active-minibuffer-window))
                      (vulpea-buffer-p))
             (save-excursion
               (goto-char (point-min))
               (let* ((tags (vulpea-buffer-tags-get))
                      (original-tags tags))
                 (if (vulpea-todo-p)
                     (setq tags (cons "todo" tags))
                   (setq tags (remove "todo" tags)))

                 ;; cleanup duplicates
                 (setq tags (seq-uniq tags))

                 ;; update tags if changed
                 (when (or (seq-difference tags original-tags)
                           (seq-difference original-tags tags))
                   (apply #'vulpea-buffer-tags-set tags))))))

         (defun vulpea-buffer-p ()
           "Return non-nil if the currently visited buffer is a note."
           (and buffer-file-name
                (string-prefix-p
                 (expand-file-name (file-name-as-directory org-roam-directory))
                 (file-name-directory buffer-file-name))))

         (defun vulpea-todo-files ()
           "Return a list of note files containing 'todo' tag." ;
           (seq-uniq
            (seq-map
             #'car
             (org-roam-db-query
              [:select [nodes:file]
                       :from tags
                       :left-join nodes
                       :on (= tags:node-id nodes:id)
                       :where (like tag (quote "%\"todo\"%"))]))))
         (defun vulpea-agenda-files-update (&rest _)
           "Update the value of `org-agenda-files'."
           (setq org-agenda-files (append (list my:d:org-gtd) (vulpea-todo-files)))
           (setq my:refile-targets (append (list org-gtd-file) (vulpea-todo-files)))
           (setq org-refile-targets '((my:refile-targets :maxlevel . 1))))
         (add-hook 'find-file-hook #'vulpea-todo-update-tag)
         (add-hook 'before-save-hook #'vulpea-todo-update-tag)
         (advice-add 'org-agenda :before #'vulpea-agenda-files-update)
         (advice-add 'org-todo-list :before #'vulpea-agenda-files-update)
         (advice-add 'org-refile :before #'vulpea-agenda-files-update)

         (defun my:org-refile ()
           "Custom refile command that updates refile targets each time."
           (interactive)
           (vulpea-agenda-files-update)
           (call-interactively 'org-refile))

         (defun update-org-agenda-buffer ()
         "Update the *Org Agenda* buffer if it exists."
         (when (get-buffer "*Org Agenda*")
           (with-current-buffer "*Org Agenda*"
             (let ((current-position (point)))
               (org-agenda-redo)
               (goto-char current-position)))))

         (defun safe-update-org-agenda-buffer ()
           "Safely update the *Org Agenda* buffer and handle any errors."
           (condition-case err
               (update-org-agenda-buffer)
             (error (message "Error updating *Org Agenda*: %s" (error-message-string err)))))

         (run-with-timer 0 60 'safe-update-org-agenda-buffer))

       (use-package org-capture
         :after (org org-agenda)
         :if (file-directory-p my:d:org-gtd)
         :commands (org-capture)
         :bind ("C-c c" . org-capture)
         :init
         :config
         (setq org-capture-templates `(("i" " Inbox" entry (file+headline org-gtd-file "Inbox")
                                        "** %^{Brief Description}"))))
      #+end_src
**** org-roam
     #+begin_src emacs-lisp
       (use-package org-roam
         :ensure t
         :after org
         :demand t
         :if (file-directory-p my:d:org-roam)
         :bind (("C-c n a" . org-roam-alias-add)
                ("C-c n f" . org-roam-node-find)
                ("C-c n i" . org-roam-node-insert)
                ("C-c n o" . org-id-get-create)
                ("C-c n t" . org-roam-tag-add)
                ("C-c n r" . org-roam-ref-add)
                ("C-c n l" . org-roam-buffer-toggle)
                ("C-c n c" . citar-insert-citation)
                ("C-c n j" . org-roam-dailies-capture-today)
                ("C-c n d" . org-roam-dailies-find-date)
                ("C-c n e" . org-roam-extract-subtree)
                ("C-c n p" . citar-open)
                ("C-c C-g t" . org-roam-dailies-find-today))
         :init
         (setq org-roam-directory my:d:org-roam)
         (setq org-roam-dailies-directory "daily_notes/")
         ;; (setq org-format-latex-options (plist-put org-format-latex-options :foreground 'auto))
         (setq org-format-latex-options (plist-put org-format-latex-options :background "Transparent"))
         (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
         :custom
         (org-roam-capture-templates '(("n" "note" plain "%?"
                                        :if-new
                                        (file+head "note/${slug}.org"
                                                   "#+title: ${title}\n#+date: %U\n#+last_modified: %U\n#+hugo_draft: true\n\n")
                                        :immediate-finish t
                                        :unnarrowed t)
                                       ("j" "project" plain "%?"
                                        :if-new
                                        (file+head "project/${slug}.org" "#+title: ${title}\n#+date: %U\n#+last_modified: %U\n\n* Tasks\n\n* Work log\n")
                                        :immediate-finish t
                                        :unnarrowed t)
                                       ("b" "book" plain "%?"
                                        :if-new
                                        (file+head "reference/book/${slug}.org" "#+title: ${title}\n#+date: %U\n#+last_modified: %U\n\n* Link\n  - \n* Review\n\n* Memo\n\n* Table of contents\n")
                                        :immediate-finish t
                                        :unnarrowed t)
                                       ("w" "web" plain "%?"
                                        :if-new
                                        (file+head "reference/web/${slug}.org" "#+title: ${title}\n#+date: %U\n#+last_modified: %U\n\n")
                                        :immediate-finish t
                                        :unnarrowed t)
                                       ("c" "config" plain "%?"
                                        :if-new
                                        (file+head "config/${slug}.org.gpg" "#+title: ${title}\n#+date: %U\n#+last_modified: %U\n\n")
                                        :immediate-finish t
                                        :unnarrowed t)
                                       ("r" "record" plain "%?"
                                        :if-new
                                        (file+head "record/${slug}.org.gpg" "#+title: ${title}\n#+date: %U\n#+last_modified: %U\n\n")
                                        :immediate-finish t
                                        :unnarrowed t)
                                       ("m" "memo" plain "%?"
                                        :if-new
                                        (file+head "memo/${slug}.org"
                                                   "#+title: ${title}\n#+date: %U\n#+last_modified: %U\n\n")
                                        :immediate-finish t
                                        :unnarrowed t)
                                       ))
         (org-roam-dailies-capture-templates  '(("j" "journal" entry
                                                 "** IN PROGRESS <%<%Y-%m-%d %a %H:%M>> %?"
                                                 :target (file+head+olp "%<%Y-%m>.org"
                                                                        "#+title: %<%Y-%m>\n"
                                                                        ("%<%Y-%m-%d %a>")))))
         :config
         (defun my:org-roam-read-only ()
           "Enable read-only mode for org-roam files."
           (when (and (buffer-file-name)
                      (string-match-p "/roam/config/" (buffer-file-name)))
             (read-only-mode 1)))
         (add-hook 'org-mode-hook 'my:org-roam-read-only)
         (add-hook 'org-mode-hook (lambda ()
                                    (setq-local time-stamp-active t
                                                time-stamp-line-limit 18
                                                time-stamp-start "^#\\+last_modified: [ \t]*"
                                                time-stamp-end "$"
                                                time-stamp-format "\[%Y-%m-%d %a %H:%M\]")
                                    (add-hook 'before-save-hook 'time-stamp nil 'local)))
         (cl-defmethod org-roam-node-type ((node org-roam-node))
           "Return the TYPE of NODE."
           (condition-case nil
               (file-name-nondirectory
                (directory-file-name
                 (file-name-directory
                  (file-relative-name (org-roam-node-file node) org-roam-directory))))
             (error "")))
         (setq org-roam-node-display-template
               (concat "${type:15} ${title:60} " (propertize "${tags:30}" 'face 'org-tag)))
         (org-roam-db-autosync-enable))

       (use-package org-roam-ui
         :ensure t
         :after org-roam
         :config
         (setq org-roam-ui-sync-theme t
               org-roam-ui-follow t
               org-roam-ui-update-on-save t
               org-roam-ui-open-on-start t))

       (use-package consult-org-roam
         :ensure t
         :init
         (consult-org-roam-mode 1)
         :custom
         (consult-org-roam-grep-func #'consult-ripgrep)
         :bind (("C-c n b" . consult-org-roam-backlinks)
                ("C-c n s" . consult-org-roam-search)))

       (use-package citar
         :ensure t
         :if (file-exists-p my:f:bib)
         :custom
         (citar-bibliography my:f:bib)
         (citar-file-open-functions '(("html" . citar-file-open-external) (t . find-file))))

       (use-package citar-embark
         :ensure t
         :after citar embark
         :no-require
         :config
         (setq citar-at-point-function 'embark-act)
         (citar-embark-mode))

       (use-package citar-org-roam
         :ensure t
         :after (citar org-roam)
         :if (file-exists-p my:f:bib)
         :config
         (citar-org-roam-mode)
         (add-to-list 'citar-org-roam-template-fields '(:citar-file . ("file")))
         (setq citar-org-roam-note-title-template "${title}")
         (setq org-roam-capture-templates
               (append org-roam-capture-templates
                       '(("p" "paper" plain "%?"
                          :if-new
                          (file+head "reference/paper/${citar-citekey}.org" "#+title: ${title}\n#+date: %U\n#+last_modified: %U\n\n* Comment\n\n* Abstract\n** En\n\n** Ja\n\n* Memo\n  :PROPERTIES:\n  :NOTER_DOCUMENT: ~/Nextcloud/zotero/${citar-file}\n  :END:\n* References")
                          :immediate-finish t
                          :unnarrowed t))))
         (setq citar-org-roam-capture-template-key "p"))

       (use-package org-noter
         :ensure t
         :custom
         (org-noter-supported-modes '(doc-view-mode pdf-view-mode nov-mode))
         (org-noter-highlight-selected-text t))
     #+end_src
**** ox-hugo
     #+begin_src emacs-lisp
       (use-package ox-hugo
         :ensure t
         :after org
         :if (and (file-directory-p my:d:org-roam)
                  (file-directory-p my:d:org-hugo))
         :custom
         (org-hugo-base-dir my:d:org-hugo)
         (org-hugo-default-section-directory "notes")
         :config
         (defun org-hugo-set-slug-if-absent (draft-position)
           "Set the Hugo slug from the ID if it's not already set."
           (goto-char (point-min))
           (unless (re-search-forward "^#\\+hugo_slug:" nil t)
             (when (re-search-forward ":ID: +\\([a-zA-Z0-9-]+\\)" nil t)
               (let ((id (match-string 1)))
                 (goto-char draft-position)
                 (forward-line)
                 (insert (concat "#+hugo_slug: " id "\n"))))))
         (defun org-hugo-replace-last-modified ()
           "Replace last_modified with hugo_lastmod."
           (goto-char (point-min))
           (while (re-search-forward "^#\\+last_modified:" nil t)
             (replace-match "#+hugo_lastmod:")))
         (defun org-hugo-export-drafts ()
           "Export all non-draft .org files in my:d:org-roam to markdown using org-hugo."
           (interactive)
           (let ((recentf-active recentf-mode))
             (when recentf-active
               (recentf-mode -1))
             (dolist (org-file (directory-files-recursively (expand-file-name "note" my:d:org-roam) "\\.org$"))
               (with-current-buffer (find-file-noselect org-file nil t nil)
                 (save-excursion
                   (undo-tree-mode -1)
                   (goto-char (point-min))
                   (let ((draft-position (re-search-forward "^#\\+hugo_draft: false$" nil t))
                         (modified (buffer-modified-p)))
                     (when draft-position
                       (org-hugo-set-slug-if-absent draft-position)
                       (org-hugo-replace-last-modified)
                       (org-hugo-export-to-md)
                       (set-buffer-modified-p modified))))
                 (kill-buffer)))
             (when recentf-active
               (recentf-mode 1)))))
     #+end_src
*** Markdown
    #+begin_src emacs-lisp
      (use-package markdown-mode
        :ensure t
        :mode (("\\.md\\'" . markdown-mode)
               ("\\.markdown\\'" . markdown-mode)
               (("README\\.md\\'" . gfm-mode)))
        :custom
        (markdown-fontify-code-blocks-natively t)
        (markdown-indent-on-enter 'indent-and-new-item)
        :hook (markdown-mode-hook . (lambda ()
                                       (setq tab-width 2)
                                       (turn-on-orgtbl)
                                       (add-to-list 'eglot-server-programs '(markdown-mode . ("marksman")))
                                       (eglot-ensure)
                                       )))
    #+end_src
*** YAML
    #+begin_src emacs-lisp
      (use-package yaml-mode
        :ensure t
        :mode (("\\.yml\\'" . yaml-ts-mode)
               ("\\.yaml\\'" . yaml-ts-mode))
        :commands (yaml-ts-mode))
    #+end_src
*** TOML
    #+begin_src emacs-lisp
      (use-package toml-mode
        :ensure t
        :mode (("\\.toml\\'" . toml-ts-mode))
        :commands (toml-ts-mode))
    #+end_src
*** JSON
    #+begin_src emacs-lisp
      (use-package json-mode
        :ensure t
        :mode (("\\.json\\'" . json-ts-mode))
        :commands (json-ts-mode)
        :hook ((json-ts-mode-hook . eglot-ensure)))
      (use-package json-reformat
        :ensure t
        :after (json-ts-mode))
    #+end_src
*** EPUB
     #+begin_src emacs-lisp
       (use-package nov
         :ensure t
         :if (display-graphic-p)
         :mode (("\\.epub\\'" . nov-mode))
         :hook (nov-mode-hook . visual-line-mode)
         :config
         (setq nov-text-width t))
     #+end_src
* Tramp
  #+begin_src emacs-lisp
    (use-package tramp
      :init
      ;; Disable version control on tramp buffers to avoid freezes.
      (setq tramp-remote-path '(tramp-default-remote-path
                                "~/.local/bin/"))
      (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
      (setq vc-ignore-dir-regexp
            (format "\\(%s\\)\\|\\(%s\\)"
                    vc-ignore-dir-regexp
                    tramp-file-name-regexp))
      (setq tramp-default-method "ssh")
      (setq tramp-auto-save-directory
            (expand-file-name "tramp-auto-save" user-emacs-directory))
      (setq tramp-persistency-file-name
            (expand-file-name "tramp-connection-history" user-emacs-directory))
      (setq password-cache-expiry nil)
      (setq tramp-use-ssh-controlmaster-options nil)
      :config
      (customize-set-variable 'tramp-ssh-controlmaster-options
                              (concat
                               "-o ControlPath=/tmp/ssh-tramp-%%r@%%h:%%p "
                               "-o ControlMaster=auto -o ControlPersist=yes"))
      (defun sudo ()
        "Use TRAMP to `sudo' the current buffer."
        (interactive)
        (when buffer-file-name
          (find-alternate-file
           (concat "/sudo:root@localhost:"
                   buffer-file-name)))))
  #+end_src
* Filer
  #+begin_src emacs-lisp
    (use-package dired
      :custom
      (dired-dwim-target t)
      (dired-recursive-copies 'always))

    (use-package dirvish
      :ensure t
      :init
      (dirvish-override-dired-mode)
      :custom
      (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
       '(("h" "~/"                          "Home")
         ("d" "~/Downloads/"                "Downloads")
         ("b" "~/Nextcloud/book"            "Books")
         ("t" "~/.local/share/Trash/files/" "TrashCan")))
      :config
      ;; (dirvish-peek-mode) ; Preview files in minibuffer
      ;; (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
      (setq dirvish-mode-line-format
            '(:left (sort symlink) :right (omit yank index)))
      (setq dirvish-attributes
            '(file-time file-size collapse subtree-state vc-state git-msg))
      (setq dirvish-subtree-state-style 'nerd)
      (setq delete-by-moving-to-trash t)
      (setq dired-listing-switches
            "-l --human-readable --group-directories-first --no-group")
      :bind ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
      (("C-c f" . dirvish-fd)
       ("C-x d" . dirvish)
       :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
       ("a"   . dirvish-quick-access)
       ("f"   . dirvish-file-info-menu)
       ("y"   . dirvish-yank-menu)
       ("N"   . dirvish-narrow)
       ("^"   . dirvish-history-last)
       ("h"   . dirvish-history-jump) ; remapped `describe-mode'
       ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
       ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
       ("TAB" . dirvish-subtree-toggle)
       ("M-f" . dirvish-history-go-forward)
       ("M-b" . dirvish-history-go-backward)
       ("M-l" . dirvish-ls-switches-menu)
       ("M-m" . dirvish-mark-menu)
       ("M-t" . dirvish-layout-toggle)
       ("M-s" . dirvish-setup-menu)
       ("M-e" . dirvish-emerge-menu)
       ("M-j" . dirvish-fd-jump)))
  #+end_src
* Browser
  #+begin_src emacs-lisp
    (use-package eww
      :demand t
      :bind (nil
             :map eww-mode-map
             ("h" . eww-back-url)
             ("l" . eww-forward-url)
             ("o" . eww-browse-with-external-browser)
             ("r" . eww-reload)
             ("y" . eww-copy-page-down)
             ("j" . scroll-up-line)
             ("k" . scroll-down-line)
             ("g" . beginning-of-buffer)
             (";" . quit-window)
             ("G" . end-of-buffer))
      :custom
      (eww-search-prefix "https://www.google.com/search?q=")
      ;; (browse-url-browser-function 'eww)
      :config
      (defun my:custom-browse-url (url &rest args)
        "Open URL with eww if it does not contain below strings. Otherwise, use the default browser."
        (let ((urls-to-match '("slack\\.com"
                               "google\\.com"
                               "notion\\.so"
                               "figma\\.com"
                               "github\\.com")))
          (if (cl-some (lambda (pattern) (string-match-p pattern url)) urls-to-match)
              (browse-url-default-browser url)
            (eww-browse-url url))))
      (setq browse-url-browser-function 'my:custom-browse-url)
      (defun eww-disable-images ()
        (interactive)
        (setq-local shr-put-image-function 'shr-put-image-alt)
        (eww-reload))
      (defun eww-enable-images ()
        (interactive)
        (setq-local shr-put-image-function 'shr-put-image)
        (eww-reload))
      (defun shr-put-image-alt (spec alt &optional flags)
        (insert alt)))
#+end_src
* Rss
  #+begin_src emacs-lisp
    (use-package elfeed
      :after eww
      :ensure t
      :if (file-directory-p my:d:nextcloud)
      :bind (("C-x w" . elfeed)
             :map elfeed-search-mode-map
             ("u" . elfeed-search-fetch)
             ("r" . elfeed-search-update--force)
             ("o" . elfeed-search-browse-url)
             (";" . elfeed-search-quit-window)
             ("m" . elfeed-search-show-entry)
             ("," . elfeed-search-first-entry)
             ("." . elfeed-search-last-entry)
             :map elfeed-show-mode-map
             ("r" . elfeed-search-update--force)
             ("u" . elfeed-search-fetch)
             ("o" . elfeed-show-visit)
             (";" . elfeed-kill-buffer))
      :custom
      (elfeed-db-directory (locate-user-emacs-file "elfeed"))
      :config
      (advice-add 'elfeed-search-fetch :after (lambda (&rest _) (message "RSS fetch completed.")))
      )

    (use-package elfeed-protocol
      :ensure t
      :demand t
      :if (file-directory-p my:d:nextcloud)
      :after elfeed
      :config
      (elfeed-protocol-enable)
      :custom
      (elfeed-use-curl t)
      (elfeed-set-timeout 36000)
      (elfeed-log-level 'debug)
      (elfeed-protocol-fever-update-unread-only t)
      :config
      (setq elfeed-protocol-feeds
            (list (let ((auth-info (nth 0 (auth-source-search :host "freshrss" :max 1))))
                    (list (plist-get auth-info :feed-url)
                          :api-url (plist-get auth-info :api-url)
                          :password (plist-get auth-info :password))))))

    ;; (use-package elfeed-goodies
    ;;   :ensure t
    ;;   :demand t
    ;;   :after elfeed
    ;;   :config
    ;;   (elfeed-goodies/setup))

    (use-package elfeed-webkit
      :ensure t
      :after elfeed
      :config
      :bind (nil
             :map elfeed-webkit-map
             ("k" . (lambda () (interactive) (xwidget-webkit-scroll-down 10)))
             ("j" . (lambda () (interactive) (xwidget-webkit-scroll-up 10)))
             :map elfeed-show-mode-map
             ("i" . elfeed-webkit-toggle)))
  #+end_src
* Mail
** mu4e
   #+begin_src emacs-lisp
     (use-package mu4e
       :if (and (executable-find "mu") (file-directory-p my:d:nextcloud) (display-graphic-p))
       :load-path (lambda () (if (eq system-type 'darwin) "/usr/local/share/emacs/site-lisp/mu/mu4e/" "/usr/share/emacs/site-lisp/mu4e/"))
       :demand t
       :bind (("C-c m" . mu4e)
              :map mu4e-minibuffer-search-query-map
              ("C-j" . skk-kakutei)
              :map mu4e-main-mode-map
              ("R" . mu4e-update-index)
              :map mu4e-headers-mode-map
              ("R" . mu4e-search-rerun)
              :map mu4e-view-mode-map
              ("C-m" . browse-url-at-point)
              ("R" . mu4e-update-index))
       :config
       (setq mu4e-headers-auto-update t)
       (setq mu4e-headers-skip-duplicates t)
       (setq mu4e-headers-sort-field :date)
       (setq mu4e-index-cleanup t)
       (setq mu4e-update-interval 300)
       (setq mu4e-attachment-dir "~/Downloads")
       (setq mu4e-change-filenames-when-moving t)
       (setq mu4e-confirm-quit nil)
       (setq mu4e-headers-visible-lines 20)
       (setq mu4e-headers-show-threads nil)
       (setq mu4e-hide-index-messages t)
       (setq message-citation-line-format "%N @ %Y-%m-%d %H:%M :\n")
       ;; M-x find-function RET message-citation-line-format for docs:
       (setq message-citation-line-function 'message-insert-formatted-citation-line)
       (setq mu4e-headers-include-related nil)
       (setq mu4e-headers-show-threads nil)
       (setq mu4e-context-policy 'pick-first)
       (setq mu4e-compose-context-policy 'always-ask)
       ;; https://github.com/djcb/mu/issues/1136#issuecomment-1229005006
       (setf (plist-get (alist-get 'trash mu4e-marks) :action)
             (lambda (docid msg target)
               (mu4e--server-move docid (mu4e--mark-check-target target) "-N"))) ; Instead of "+T-N"
       ;; for sending mails
       (require 'smtpmail)
       ;; don't keep message compose buffers around after sending:
       (setq message-kill-buffer-on-exit t)
       (setq sendmail-program "msmtp"
             send-mail-function 'smtpmail-send-it
             message-sendmail-f-is-evil t
             message-sendmail-extra-arguments '("--read-envelope-from")
             message-send-mail-function 'message-send-mail-with-sendmail)
       (load (expand-file-name "personal_config/emacs_mail/mu4e_config.el" my:d:nextcloud))
       (defun my:break-word-into-bigrams (word)
         "Break word into list of bi-grams if non-ascii characters."
         (cond ((or (<= (length word) 2)
                    (equal (length word) (string-bytes word)))
                word)
               ((string-match ":" word)
                (let ((pos (string-match ":" word)))
                  (concat (substring word 0 (+ 1 pos))
                          (my:break-word-into-bigrams (substring word (+ 1 pos))))))
               ((memq 'ascii (find-charset-string word))
                (let ((ascii-parts (split-string word "\\([^[:ascii:]]+\\)" t)))
                  (mapconcat (lambda (part)
                               (if (string-match-p "[[:ascii:]]" part)
                                   part
                                 (my:break-word-into-bigrams part)))
                             ascii-parts "")))
               (t
                (let ((char-list (split-string word "" t))
                      (br-word ""))
                  (while (cdr char-list)
                    (setq br-word (concat br-word (concat (car char-list) (cadr char-list)) " "))
                    (setq char-list (cdr char-list)))
                  br-word))))
       (defun my:break-query-into-bigrams (expr)
         "Break strings into bi-grams in query."
         (let ((word-list (split-string expr " " t))
               (new ""))
           (dolist (word word-list new)
             (setq new (concat new (my:break-word-into-bigrams word) " ")))))
       (setq mu4e-query-rewrite-function 'my:break-query-into-bigrams)

       (add-hook 'emacs-startup-hook  (lambda ()
                                        (my:imapnotify-start-prodigy-services)
                                        (mu4e))))
   #+end_src

   #+begin_src emacs-lisp
     (use-package mu4e-alert
       :ensure t
       :if (and (executable-find "mu") (file-directory-p my:d:nextcloud) (display-graphic-p))
       :custom
       (mu4e-alert-email-notification-types '(subjects))
       :config
       (if (eq system-type 'darwin) (mu4e-alert-set-default-style 'notifier) (mu4e-alert-set-default-style 'libnotify))
       (mu4e-alert-enable-mode-line-display)
       (mu4e-alert-enable-notifications))
   #+end_src
* Shell
  #+begin_src emacs-lisp
    (use-package eshell
      :custom
      (eshell-cmpl-ignore-case t)
      (eshell-cmpl-cycle-completions t)
      (shell-cmpl-cycle-cutoff-length 5)
      (eshell-ask-to-save-history (quote always))
      (eshell-hist-ignoredups t)
      (eshell-list-files-after-cd t)
      :bind (nil
             :map eshell-mode-map
             ("C-r" . consult-history))
      :config
      (add-hook 'eshell-mode-hook (lambda () (setenv "TERM" "xterm-256color")))
      (defun corfu-send-shell (&rest _)
        "Send completion candidate when inside comint/eshell."
        (cond
         ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
          (eshell-send-input))
         ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
          (comint-send-input))))
      (advice-add #'corfu-insert :after #'corfu-send-shell))

    (use-package eshell-prompt-extras
      :ensure t
      :after esh-opt
      :defines eshell-highlight-prompt
      :commands (epe-theme-lambda epe-theme-dakrone epe-theme-multiline-with-status)
      :init (setq eshell-highlight-prompt nil
                  epe-path-style 'full
                  eshell-prompt-function 'epe-theme-multiline-with-status))

    (use-package eshell-toggle
      :ensure t
      :bind* ("C-t" . eshell-toggle)
      :custom
      (eshell-toggle-size-fraction 2))

    (use-package eat
      :ensure t
      :hook (eshell-load-hook . eat-eshell-mode))
  #+end_src
* External Collaboration
** Pdf
   #+begin_src emacs-lisp
     (use-package pdf-tools
       :ensure t
       :if (display-graphic-p)
       :demand t
       :hook ((pdf-view-mode-hook . (lambda() (display-line-numbers-mode -1))))
       :bind (nil
              :map pdf-view-mode-map
              ("C-s" . isearch-forward))
       :config
       (pdf-tools-install)
       (setq-default pdf-view-display-size 'fit-page)
       (setq pdf-view-incompatible-modes '(linum-mode linum-relative-mode helm-linum-relative-mode nlinum-mode nlinum-hl-mode nlinum-relative-mode yalinum-mode))
       (setq pdf-annot-activate-created-annotations t))
   #+end_src
** atomic-chrome
   #+begin_src emacs-lisp
     (use-package atomic-chrome
       :ensure t
       :if (display-graphic-p)
       :config
       (atomic-chrome-start-server))
   #+end_src

** dictionary
   #+begin_src emacs-lisp
     ;; (when (eq system-type 'darwin)
     ;;   (defun monokakido-lookup (word)
     ;;     "Lookup word with Dictionaries.app by Monokakido"
     ;;     (call-process "open" nil 0 nil (concat "mkdictionaries:///?text=" word)))
     ;;   (defun monokakido-lookup-word ()
     ;;     "Lookup the word at point with Dictionaries.app by Monokakido."
     ;;     (interactive)
     ;;     (monokakido-lookup (read-from-minibuffer "Monokakido: " (current-word))))
     ;;   (global-set-key (kbd "C-c w") 'monokakido-lookup-word))

     (use-package  mw-thesaurus
       :ensure t
       :bind ("C-c w" . mw-thesaurus-lookup-dwim))
   #+end_src
** prodigy
   #+begin_src emacs-lisp
     (use-package prodigy
       :ensure t
       :if (and (executable-find "goimapnotify") (file-directory-p my:d:nextcloud) (display-graphic-p))
       :config
       (load (expand-file-name "personal_config/emacs_mail/imapnotify.d/prodigy.el" my:d:nextcloud)))
  #+end_src
** Translate
   #+begin_src emacs-lisp
     (use-package go-translate
       :ensure t
       :bind (("C-c t" . gts-do-translate))
       :config
       (setq gts-translate-list '(("ja" "en") ("en" "ja")))
       (setq gts-default-translator
             (gts-translator
              :picker
              (gts-prompt-picker)
              :engines
              (list
               (gts-google-engine)
               (gts-bing-engine))
              :render
              (gts-buffer-render)))
       (setq gts-buffer-follow-p t))
   #+end_src
