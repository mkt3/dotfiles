#+title: Configurations for Emacs
#+author: Makoto Morinaga
#+startup: content
#+startup: nohideblocks

* Header
 #+begin_src emacs-lisp
   ;;; README.el --- init file for Emacs -*- coding: utf-8 ; lexical-binding: t -*-

   ;; Copyright (C) 2023 Makoto Morinaga

   ;; Author: Makoto Morinaga <makoto@mkt3.me>

   ;;; Code:
 #+end_src
* Packages
** Package manager
   #+begin_src emacs-lisp
     (eval-and-compile
       (customize-set-variable
        'package-archives '(("org" . "https://orgmode.org/elpa/")
                            ("melpa" . "https://melpa.org/packages/")
                            ("gnu" . "https://elpa.gnu.org/packages/")
                            ("nongnu" . "https://elpa.nongnu.org/nongnu/"))
        )
       (package-initialize)

       (unless (package-installed-p 'use-package)
         (package-refresh-contents)
         (package-install 'use-package))
       (setq use-package-hook-name-suffix nil)
       (use-package delight :ensure t))
   #+end_src
** Auto packae update
   #+begin_src emacs-lisp
     (use-package auto-package-update
       :ensure t
       :config
       (setq auto-package-update-delete-old-versions t)
       (setq auto-package-update-hide-results t)
       (auto-package-update-maybe))
   #+end_src
* Initialize
** Load Path
   #+begin_src emacs-lisp
     (use-package exec-path-from-shell
       :ensure t
       :if (display-graphic-p)
       :config
       (setq exec-path-from-shell-arguments  "") ;; Since the UI is set to interactive in .zshrc.
       (setq exec-path-from-shell-variables  '("PATH" "GOPATH" "NAME" "ORG_HUGO" "RUSTUP_HOME" "CARGO_HOME"))
       (exec-path-from-shell-initialize))
   #+end_src
** Const
   #+begin_src emacs-lisp
     (defconst my:f:bib (expand-file-name "GoogleDrive/paperpile.bib" (getenv "HOME")))
     (defconst my:d:nextcloud (expand-file-name "Nextcloud" (getenv "HOME")))
     (defconst my:d:gtd (expand-file-name "gtd" my:d:nextcloud))
     (defconst my:d:org-roam (expand-file-name "org-roam" my:d:nextcloud))
     (defconst my:d:org-hugo (getenv "ORG_HUGO"))
     (defconst my:d:password-store (expand-file-name "password-store" my:d:nextcloud))
   #+end_src
** Custom
   #+begin_src emacs-lisp
     (setq custom-file (locate-user-emacs-file "custom.el"))
   #+end_src
* Builtin config
** scroll
   #+begin_src emacs-lisp
     (setq scroll-preserve-screen-position t
           scroll-margin 5
           scroll-conservatively 1
           next-screen-context-lines 5)
   #+end_src
** symlink
   Automatically visit symlink sources
   #+begin_src emacs-lisp
     (use-package vc-hooks :custom (vc-follow-symlinks t))
     (setq-default find-file-visit-truename t)
     #+end_src
** tab
   #+begin_src emacs-lisp
     (setq-default
      indent-tabs-mode nil
      tab-width 4)
   #+end_src
** Trancate line
   #+begin_src emacs-lisp
     (setq truncate-lines nil
           truncate-partial-width-windows nil)
   #+end_src
** Delete
   Delete selection if you insert.
   #+begin_src emacs-lisp
     (bind-key "C-h" 'delete-backward-char)
     (use-package delsel
       :custom
       (delete-selection-mode t))
   #+end_src
** Assigning directory name to the same buffer name
   #+begin_src emacs-lisp
     (use-package uniquify
       :custom
       (uniquify-buffer-name-style  'post-forward-angle-brackets)
       (uniquify-min-dir-content  1)
       (funiquify-ignore-buffers-re  "*[^*]+*"))
   #+end_src
** Save various history
   #+begin_src emacs-lisp
     (use-package savehist
       :custom
       (savehist-autosave-interval 60)
       (history-delete-duplicates t)
       (history-length 1000)
       (savehist-additional-variables '(kill-ring
                                        search-ring
                                        regexp-search-ring
                                        file-name-history
                                        read-expression-history
                                        command-history
                                        extended-command-history))
       :config
       (savehist-mode))
   #+end_src
** Line number
   #+begin_src emacs-lisp
     (use-package display-line-numbers
       :config
       (global-display-line-numbers-mode))
   #+end_src
** Disable auto generate file
   #+begin_src emacs-lisp
     (use-package files
       :custom ((make-backup-files nil)
                (auto-save-default nil)))
   #+end_src
** Time
   #+begin_src emacs-lisp
     (use-package time
       :custom
       (display-time-string-forms  '(month "/" day "(" dayname ") " 24-hours ":" minutes))
       (display-time-mode t))
   #+end_src
** Auto revert
   #+begin_src emacs-lisp
     (use-package autorevert
       :delight auto-revert-mode
       :custom
       (auto-revert-interval 0.1)
       :config
       (global-auto-revert-mode))
   #+end_src
** Parentheses
   #+begin_src emacs-lisp
     (use-package paren
       :custom-face (show-paren-match . '((t
                                           (:weight regular
                                                    :background "#44475a"
                                                    :underline "$ffff00"))))
       :custom
       (show-paren-delay 0.0)
       (show-paren-mode t))
   #+end_src
** Window
   #+begin_src emacs-lisp
     (bind-key* "C-x |" 'split-window-right)
     (bind-key* "C-x -" 'split-window-below)
     (bind-key* "C-x x" 'delete-window)
     (use-package windmove
       :custom
       (windmove-wrap-around  t)
       :bind (("C-M-h" . windmove-left)
              ("C-M-k" . windmove-up)
              ("C-M-j" . windmove-down)
              ("C-M-l" . windmove-right)))
   #+end_src
** Save file browsing history
   #+begin_src emacs-lisp
     (use-package recentf
       :init
       (setq recentf-exclude '(".recentf"
                               "^/tmp\\.*"
                               "bookmarks"
                               "\\.*.calendar.ics"))
       :config
       (recentf-mode))
   #+end_src
** Save last cursor position
   #+begin_src emacs-lisp
     (use-package saveplace
       :custom
       (save-place-mode t))

   #+end_src
** Authentication
   #+begin_src emacs-lisp
     (use-package plstore
       :if (file-directory-p my:d:password-store)
       :init
       (setq epa-pinentry-mode 'loopback))
   #+end_src

** Misc
   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
     (setq
      create-lockfiles nil
      enable-recursive-minibuffers t
      ring-bell-function 'ignore
      text-quoting-style 'straight
      user-full-name (getenv "NAME"))
     (use-package simple
       :demand t
       :custom
       (kill-ring-max                100)
       (kill-read-only-ok            t)
       (eval-expression-print-length nil)
       (eval-expression-print-level  nil)
       (column-number-mode            t)
       :bind ("C-x j" . eval-print-last-sexp))
   #+end_src
* Appearance
** Color theme
*** doom-nord
    #+begin_src emacs-lisp
      (use-package doom-themes
        :ensure t
        :config
        (load-theme 'doom-nord t))
    #+end_src
*** modus-theme
    #+begin_src emacs-lisp
      (use-package modus-themes
        :disabled
        :custom
        ((modus-themes-italic-constructs . t)
         (modus-themes-bold-constructs   . t)
         (modus-themes-region            . '(bg-only no-extend))
         (modus-themes-syntax            . '(faint))
         (modus-themes-diffs             . 'deuteranopia)
         )
        :config
        (load-theme 'modus-vivendi))
    #+end_src
** Font
   #+begin_src emacs-lisp
     (when (display-graphic-p)
       (if (eq system-type 'darwin)
           (add-to-list 'default-frame-alist '(font . "Cica-22"))
         (add-to-list 'default-frame-alist '(font . "Cica-16"))))
   #+end_src
** Highlight-indent-gide
   #+begin_src emacs-lisp
     (use-package highlight-indent-guides
       :ensure t
       :delight
       :hook ((prog-mode-hook yaml-mode-hook) . highlight-indent-guides-mode)
       :custom
       (highlight-indent-guides-method  'character)
       (highlight-indent-guides-auto-enabled t)
       (highlight-indent-guides-responsive t)
       (highlight-indent-guides-character ?\|))
   #+end_src
** rainbow-delimiters
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :hook ((prog-mode-hook . rainbow-delimiters-mode)))
   #+end_src
** nyan-mode
   #+begin_src emacs-lisp
     (use-package nyan-mode
       :ensure t
       :init
       (nyan-mode 1))
   #+end_src
** tab-bar-mode
   #+begin_src emacs-lisp
     (use-package tab-bar
       :init (defvar my:ctrl-q-map (make-sparse-keymap)
               "My original keymap binded to C-o.")
       (defalias 'my:ctrl-q-prefix my:ctrl-q-map)
       (define-key global-map (kbd "C-q") 'my:ctrl-q-prefix)
       (define-key my:ctrl-q-map (kbd "c")   'tab-new)
       (define-key my:ctrl-q-map (kbd "C-c") 'tab-new)
       (define-key my:ctrl-q-map (kbd "k")   'tab-close)
       (define-key my:ctrl-q-map (kbd "C-k") 'tab-close)
       (define-key my:ctrl-q-map (kbd "n")   'tab-next)
       (define-key my:ctrl-q-map (kbd "C-n") 'tab-next)
       (define-key my:ctrl-q-map (kbd "TAB") 'tab-next)
       (define-key my:ctrl-q-map (kbd "p")   'tab-previous)
       (define-key my:ctrl-q-map (kbd "C-p") 'tab-previous)
       (define-key my:ctrl-q-map (kbd "1") '(lambda () (interactive) (tab-bar-select-tab 1)))
       (define-key my:ctrl-q-map (kbd "2") '(lambda () (interactive) (tab-bar-select-tab 2)))
       (define-key my:ctrl-q-map (kbd "3") '(lambda () (interactive) (tab-bar-select-tab 3)))
       (define-key my:ctrl-q-map (kbd "4") '(lambda () (interactive) (tab-bar-select-tab 4)))
       (define-key my:ctrl-q-map (kbd "5") '(lambda () (interactive) (tab-bar-select-tab 5)))
       (define-key my:ctrl-q-map (kbd "6") '(lambda () (interactive) (tab-bar-select-tab 6)))
       (define-key my:ctrl-q-map (kbd "7") '(lambda () (interactive) (tab-bar-select-tab 7)))
       (define-key my:ctrl-q-map (kbd "8") '(lambda () (interactive) (tab-bar-select-tab 8)))
       (define-key my:ctrl-q-map (kbd "9") '(lambda () (interactive) (tab-bar-select-tab 9)))
       (define-key my:ctrl-q-map (kbd "0") '(lambda () (interactive) (tab-bar-select-tab 0)))

       (defun my:tab-bar-tab-name-truncated ()
         "Custom: Generate tab name from the buffer of the selected window."
         (let ((tab-name (buffer-name (window-buffer (minibuffer-selected-window))))
               (ellipsis (cond (tab-bar-tab-name-ellipsis)
                               ((char-displayable-p ?…) "…")
                               ("..."))))
           (if (< (length tab-name) tab-bar-tab-name-truncated-max)
               (format "%-12s" tab-name)
             (propertize (truncate-string-to-width tab-name tab-bar-tab-name-truncated-max nil
                                                   nil ellipsis) 'help-echo tab-name))))
       :custom
       (tab-bar-close-button-show      nil)
       (tab-bar-close-last-tab-choice  nil)
       (tab-bar-close-tab-select       'left)
       (tab-bar-history-mode           nil)
       (tab-bar-new-tab-choice         "*scratch*")
       (tab-bar-new-button-show        nil)
       (tab-bar-tab-name-function      'my:tab-bar-tab-name-truncated)
       (tab-bar-tab-name-truncated-max 12)
       (tab-bar-separator              "")
       :config
       (setq tab-bar-select-tab-modifiers '(meta))
       (setq tab-bar-tab-hints t)
       (tab-bar-mode +1))
   #+end_src
** dimmer
   Visually highlight the selected buffer.
   #+begin_src emacs-lisp
     (use-package dimmer
       :ensure t
       :custom
       (dimmer-fraction  0.5)
       (dimmer-exclusion-regexp-list  '(".*Minibuf.*" ".*which-key.*" ".*NeoTree.*"
                                        ".*Messages.*" ".*Async.*" ".*Warnings.*" ".*LV.*"
                                        ".*Ilist.*"))
       (dimmer-mode t))
   #+end_src
** whitespace
   #+begin_src emacs-lisp
     (use-package whitespace
       :ensure t
       :delight
       :bind ("C-c W" . whitespace-cleanup)
       :custom
       (whitespace-style '(face trailing tabs spaces empty space-mark tab-mark))
       (whitespace-display-mappings '((space-mark ?\u3000 [?\u25a1])
                                      (tab-mark ?\t [?\u00BB ?\t]
                                                [?\\ ?\t])))
       (whitespace-space-regexp  "\\(\u3000+\\)")
       (whitespace-global-modes  '(emacs-lisp-mode shell-script-mode sh-mode python-mode
                                                   org-mode markdown-mode rjsx-mode
                                                   css-mode))
       (global-whitespace-mode t)
       :config
       (set-face-attribute 'whitespace-trailing nil
                           :background "Black"
                           :foreground "DeepPink"
                           :underline t)
       (set-face-attribute 'whitespace-tab nil
                           :background "Black"
                           :foreground "LightSkyBlue"
                           :underline t)
       (set-face-attribute 'whitespace-space nil
                           :background "Black"
                           :foreground "GreenYellow"
                           :weight 'bold)
       (set-face-attribute 'whitespace-empty nil
                           :background "Black"))
   #+end_src
* UI
** X11
   #+begin_src emacs-lisp
     (when (eq 'x window-system)
       (setq x-super-keysym 'meta))
   #+end_src
** mac
   #+begin_src emacs-lisp
     (use-package mac
       :when (eq 'mac window-system)
       :custom
       (mac-control-modifier 'control)
       (mac-option-modifier 'super)
       (mac-command-modifier 'meta)
       (mac-right-control-modifier. 'control)
       (mac-right-option-modifier 'hyper)
       (mac-right-command-modifier'meta))
   #+end_src
** ns
   #+begin_src emacs-lisp
     (use-package ns
       :if (eq 'ns window-system)
       :custom
       (ns-control-modifier 'control)
       (ns-option-modifier 'super)
       (ns-command-modifier 'meta)
       (ns-right-control-modifier 'control)
       (ns-right-option-modifier 'hyper)
       (ns-right-command-modifier 'meta)
       (ns-function-modifier 'super)
       :config
       (setq default-frame-alist (append '((ns-appearance            . dark)
                                           (ns-transparent-titlebar  . t))
                                         default-frame-alist)))
   #+end_src
** language
   #+begin_src emacs-lisp
     (use-package mule
       :init
       (set-language-environment "Japanese")
       (prefer-coding-system 'utf-8))
   #+end_src
** skk
   #+begin_src emacs-lisp
     (use-package ddskk
       :ensure t
       :if (display-graphic-p)
       :bind* (("C-j" . skk-kakutei))
       :custom
       (default-input-method "japanese-skk")
       (skk-byte-compile-init-file t)
       :init
       (setq skk-user-directory (expand-file-name "ddskk.d" user-emacs-directory))
       (setq skk-init-file (expand-file-name "init.el" skk-user-directory ))
       (when (file-directory-p my:d:nextcloud)
         (setq skk-jisyo (cons (expand-file-name "personal_config/skk/skk-jisyo.utf8" my:d:nextcloud) 'utf-8))
         )
       (setq viper-mode nil))
   #+end_src
** smartparens
   #+begin_src emacs-lisp
     (use-package smartparens
       :ensure t
       :delight
       :hook (after-init-hook . smartparens-global-strict-mode)
       :bind
       :custom
       (electric-pair-mode nil)
       :config
       (require 'smartparens-config))
      #+end_src
** Complementaly UI
*** vertico
     #+begin_src emacs-lisp
       (use-package vertico
         :ensure t
         :init
         (vertico-mode)
         :custom
         (vertico-count 20)
         (enable-recursive-minibufferst)
         (vertico-cycle t)
         :bind (:map vertico-map
                     ("C-r" . vertico-previous)
                     ("C-s" . vertico-next)))
       (use-package vertico-directory
         :ensure nil ;; part of vertico
         :after vertico
         :commands (vertico-directory-tidy)
         :bind (:map vertico-map
                     ("RET" . vertico-directory-enter)
                     ("C-l" . vertico-directory-up)))
     #+end_src
*** consult
    #+begin_src emacs-lisp
      (use-package consult
        :ensure t
        :init
        (defun my:consult-line
            (&optional
             at-point)
          (interactive "P")
          (if at-point (consult-line (thing-at-point 'symbol))
            (consult-line)))
        :custom
        (recentf-mode t)
        :bind* (("C-s" . my:consult-line)
                ("C-c C-a" . consult-buffer)
                ("C-z" . consult-imenu)
                ([remap goto-line] . consult-goto-line)
                ([remap yank-pop] . consult-yank-pop)))
    #+end_src
*** marginalia
    #+begin_src emacs-lisp
      (use-package marginalia
        :ensure t
        :init
        (marginalia-mode))
    #+end_src
*** orderless
    #+begin_src emacs-lisp
      (use-package orderless
        :ensure t
        :custom
        (completion-styles '(orderless basic))
        (completion-category-overrides '((file (styles . (partial-completion)))
                                         ;; (eglot (styles orderless+initialism))
                                         )))

    #+end_src
*** embark
    #+begin_src emacs-lisp
      (use-package embark :ensure t)
      (use-package embark-consult
        :ensure t
        :hook
        (embark-collect-mode . consult-preview-at-point-mode))
    #+end_src
*** tempel
    #+begin_src emacs-lisp
      (use-package tempel
        :ensure t
        :bind (nil
               :map tempel-map
               ("C-i" . tempel-next)
               )
        :init
        (defun tempel-setup-capf ()
          (setq-local completion-at-point-functions
                      (cons #'tempel-complete
                            completion-at-point-functions)))
        (add-hook 'prog-mode-hook 'tempel-setup-capf)
        (add-hook 'text-mode-hook 'tempel-setup-capf)
        (add-hook 'org-mode-hook 'tempel-setup-capf))
    #+end_src
*** corfu
    #+begin_src emacs-lisp
      (use-package corfu-terminal
        :ensure t
        :if (not (display-graphic-p))
        :config
        (corfu-terminal-mode +1))
      (use-package corfu
        :ensure t
        :custom ((corfu-auto t)
                 (corfu-auto-prefix 1)
                 (corfu-auto-delay 0)
                 (corfu-cycle t)
                 (tab-always-indent 'complete))
        :init
        (global-corfu-mode)
        (corfu-popupinfo-mode))
      (use-package kind-icon
        :ensure t
        :after corfu
        :custom (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
        :config
        (custom-set-variables
         '(kind-icon-default-style
           '(:padding 0 :stroke 0 :margin 0 :radius 0 :height 0.6 :scale 1.0)))
        (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
      (use-package cape
        :ensure t
        :init
        ;; Add `completion-at-point-functions', used by `completion-at-point'.
        (add-to-list 'completion-at-point-functions #'cape-file)
        (add-to-list 'completion-at-point-functions #'cape-dabbrev)
        ;;(add-to-list 'completion-at-point-functions #'cape-history)
        (add-to-list 'completion-at-point-functions #'cape-keyword)
        ;; (add-to-list 'completion-at-point-functions #'cape-tex)
        ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
        ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
        ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
        ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
        ;;(add-to-list 'completion-at-point-functions #'cape-dict)
        ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
        ;;(add-to-list 'completion-at-point-functions #'cape-line)
        :config
        (defun my/eglot-capf ()
          (setq-local completion-at-point-functions
                      (list (cape-super-capf
                             #'eglot-completion-at-point
                             #'tempel-complete)
                            #'cape-keyword
                            #'cape-dabbrev
                            #'cape-file)
                      ))
        (add-hook 'eglot-managed-mode-hook #'my/eglot-capf)
        )
    #+end_src
** which-key
   #+begin_src emacs-lisp
     (use-package which-key
       :ensure t
       :delight
       :custom
       ((which-key-idle-delay  1)
        (which-key-replacement-alist  '(((nil . "Prefix Command") . (nil . "prefix"))
                                        ((nil . "\\`\\?\\?\\'") . (nil . "lambda"))
                                        (("<left>") . ("←"))
                                        (("<right>") . ("→"))
                                        (("<\\([[:alnum:]-]+\\)>") . ("\\1"))))
        (which-key-mode t)))
   #+end_src
** ace-window
   #+begin_src emacs-lisp
     (use-package ace-window
       :ensure t
       :bind ("C-x o" . ace-window)
       :custom
       (aw-keys '(?j ?k ?l ?i ?o ?h ?y ?u ?p))
       :custom-face
       (aw-leading-char-face . '((t
                                   (:height 4.0
                                            :foreground "#f1fa8c")))))
   #+end_src
** undo-tree
   #+begin_src emacs-lisp
     (use-package undo-tree
       :ensure t
       :demand t
       :delight
       :bind (("M-/" . undo-tree-redo))
       :custom
       (undo-tree-auto-save-history  t)
       (undo-tree-history-directory-alist  `(("." . ,(concat user-emacs-directory
                                                              ".cache/undo-tree-hist/"))))
       :config
       (global-undo-tree-mode))
   #+end_src
** mwim
   #+begin_src emacs-lisp
     (use-package mwim
       :ensure t
       :bind (("C-a" . mwim-beginning-of-code-or-line)
              ("C-e" . mwim-end-of-code-or-line)))
   #+end_src
** dmacro
   #+begin_src emacs-lisp
     (use-package dmacro
       :ensure t
       :delight
       :custom
       (dmacro-key (kbd "C-t"))
       :config
       (global-dmacro-mode)
       )
   #+end_src
* Gabage collection
  #+begin_src emacs-lisp
    (use-package gcmh
      :ensure t
      :delight
      :custom
      (gcmh-verbose t)
      (gcmh-high-cons-threshold 100000000)
      (garbage-collection-messages t)
      :config
      (gcmh-mode 1))
  #+end_src
* LSP
** eglot
   #+begin_src emacs-lisp
     (use-package eglot
       :ensure t
       :config
       (add-hook 'python-mode-hook 'eglot-ensure)
       (add-hook 'rust-mode-hook 'eglot-ensure)
       (add-hook 'sh-mode-hook 'eglot-ensure)
       ;; (add-to-list 'eglot-stay-out-of 'company)
       )
   #+end_src
** flymake
   #+begin_src emacs-lisp
     (use-package flymake
       :ensure t
       :bind (nil
              :map flymake-mode-map
              ("C-c p" . flymake-goto-prev-error)
              ("C-c n" . flymake-goto-next-error))
       :config
       (set-face-background 'flymake-errline "red")
       (set-face-background 'flymake-warnline "yellow"))
     (use-package flymake-diagnostic-at-point
       :ensure t
       :after flymake
       :config
       (add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode))
   #+end_src
* Programing Langs
** General
*** tree-sitter
    #+begin_src emacs-lisp
      (use-package tree-sitter
        :ensure t
        :delight
        :init
        (global-tree-sitter-mode)
        :hook (tree-sitter-after-on-hook . tree-sitter-hl-mode)
        )
      (use-package tree-sitter-langs :ensure t)
    #+end_src
*** docker-mode
    #+begin_src emacs-lisp
      (use-package docker :ensure t)
      (use-package dockerfile-mode :ensure t)
      (use-package docker-compose-mode :ensure t)
      (use-package docker-tramp :ensure t)
    #+end_src
*** git
    #+begin_src emacs-lisp
      (use-package git-modes :ensure t)
      (use-package magit
        :ensure t
        :init
        (defun c/git-add ()
          "Add anything."
          (interactive)
          (shell-command "git add ."))
        (defun c/git-commit-a ()
          "Commit after add anything."
          (interactive)
          (c/git-add)
          (magit-commit-create))
        :bind (("C-x g" . magit-status)
               ("C-x M-g" . magit-dispatch-popup)))
    #+end_src
** languages
*** Shell Script
    #+begin_src emacs-lisp
      (use-package flymake-shellcheck
        :ensure t
        :commands flymake-shellcheck-load
        :init
        (add-hook 'sh-mode-hook 'flymake-shellcheck-load))
    #+end_src
*** Python
    #+begin_src emacs-lisp
      (use-package python
        :custom (python-indent-guess-indent-offset-verbose . nil))
      (use-package py-isort
        :ensure t
        :hook (python-mode-hook . (lambda ()
                                    (add-hook 'before-save-hook 'py-isort-before-save)))
        :custom
        (py-isort-options '("--profile=black")))
      (use-package blacken
        :ensure t
        :delight
        :hook (python-mode-hook .  blacken-mode)
        :custom
        (blacken-line-length 300)
        ;; (blacken-skip-string-normalization t)
        )
      (use-package poetry
        :ensure t
        :config
        ;; Checks for the correct virtualenv. Better strategy IMO because the default
        ;; one is quite slow.
        (setq poetry-tracking-strategy 'switch-buffer)
        :hook ((python-mode-hook . poetry-tracking-mode)))

      (use-package ein
        :ensure t)
    #+end_src
*** Rust
    #+begin_src emacs-lisp
      (use-package rust-mode
        :ensure t
        :custom rust-format-on-save t)

      (use-package cargo
        :ensure t
        :hook (rust-mode . cargo-minor-mode))


#+end_src
*** web
**** web-mode
     #+begin_src emacs-lisp
       (use-package web-mode
         :ensure t
         :after flycheck
         :mode ("\\.tsx\\'" "\\.css\\'" "\\.p?html?\\'")
         :custom
         (web-mode-markup-indent-offset 2)
         (web-mode-css-indent-offset 2)
         (web-mode-code-indent-offset 2)
         (web-mode-comment-style 2)
         (web-mode-style-padding 1)
         (web-mode-script-padding 1)
         (web-mode-enable-auto-closing t)
         (web-mode-enable-auto-pairing t)
         (web-mode-auto-close-style 2)
         (web-mode-tag-auto-close-style 2)
         (indent-tabs-mode nil)
         (tab-width 2)
         :hook (web-mode-hook . (lambda ()
                                  (interactive)
                                  (when (string-equal "tsx" (file-name-extension buffer-file-name))
                                    (add-node-modules-path)
                                    (tide-setup)
                                    (flycheck-mode +1)
                                    (flycheck-add-mode 'javascript-eslint 'web-mode)
                                    (setq flycheck-checker 'javascript-eslint)
                                    (eldoc-mode +1)
                                    (tide-hl-identifier-mode +1)))))
     #+end_src
**** scss-mode
     #+begin_src emacs-lisp
       (use-package scss-mode
         :ensure t
         :hook ((scss-mode-hook . (lambda ()
                                    (and
                                     (set (make-local-variable 'css-indent-offset) 2)
                                     (set (make-local-variable 'scss-compile-at-save) nil))))))
     #+end_src
*** typescript / javascript
**** node module path
     #+begin_src emacs-lisp
       (use-package  add-node-modules-path
         :ensure t
         :commands add-node-modules-path)
     #+end_src
**** rjsx-mode
     #+begin_src emacs-lisp
       (use-package rjsx-mode
         :ensure t
         :mode ("\\.jsx\\'" "\\.js\\'")
         :custom
         (indent-tabs-mode nil)
         (js-indent-level 2)
         (js2-strict-missing-semi-waring nil)
         (js2-mode-show-strict-warnings nil)
         :config
         :hook (rjsx-mode-hook . (lambda ()
                                   (add-node-modules-path)
                                   (flycheck-mode t))))
     #+end_src
**** tide
     #+begin_src emacs-lisp
       (use-package tide
         :ensure t
         :commands tide-setup)
     #+end_src
**** typescript-mode
     #+begin_src emacs-lisp
       (use-package typescript-mode
         :ensure t
         :custom
         (typescript-indent-level 2)
         :hook (typescript-mode-hook . (lambda ()
                                         (interactive)
                                         (add-node-modules-path)
                                         (flycheck-mode +1)
                                         (tide-setup)
                                         (eldoc-mode +1)
                                         (tide-hl-identifier +1)
                                         (flycheck-add-mode 'javascript-eslint 'web-mode)
                                         (setq flycheck-checker 'javascript-eslint))))
     #+end_src
** Markup Languages
*** Org
**** org-mode
     #+begin_src emacs-lisp
       (use-package org
         :ensure t
         ;; :hook ((org-mode-hook . (lambda ()
         ;;                           (setq flycheck-checker 'textlint)
         ;;                           (flycheck-mode 1))))
         :bind (("C-c c" . org-capture)
                ("C-c a" . org-agenda)
                ("C-c g" . gtd)
                ("C-c i" . org-insert-structure-template)
                ("C-c C-'" . org-edit-special)
                :map org-src-mode-map
                ("C-c C-'" . org-edit-src-exit)
                )
         :init
         (defvar org-gtd-file (expand-file-name "gtd.org" my:d:gtd))
         (defun gtd ()
           (interactive)
           (find-file org-gtd-file))
         (setq org-directory my:d:gtd)
         (setq org-agenda-files (list org-directory))
         (setq org-latex-create-formula-image-program 'dvisvgm)
         :custom
         (org-refile-targets  '((org-agenda-files :maxlevel . 1)))
         (org-agenda-current-time-string "now ============")
         (org-startup-indent nil)
         (org-hide-leading-stars t)
         (org-return-follows-link t)
         (org-startup-truncated nil)
         (org-use-speed-commands t)
         (org-log-done t)
         (org-adapt-indentation t)
         (org-confirm-babel-evaluate nil)
         (org-agenda-todo-ignore-scheduled 'feature)
         (org-todo-keywords '((sequence "TODO(t)" "IN PROGRESS(i)" "|" "DONE(d)")
                              (sequence "WAITING(w@/!)" "CANCELLED(c@/!)" "MEMO(m)" "SOMEDAY(s)")
                              (type "Project" "Sub-Project" "|" "DONE(d)")
                              ))
         (org-todo-keyword-faces '(("Project" :foreground "royal blue"
                                    :weight bold)
                                   ("Sub-Project" :foreground "royal blue"
                                    :weight bold)
                                   ("TODO" :foreground "red"
                                    :weight bold)
                                   ("IN PROGRESS" :foreground "cornflower blue"
                                    :weight bold)
                                   ("DONE" :foreground "green"
                                    :weight bold)
                                   ("WAITING" :foreground "orange"
                                    :weight bold)
                                   ("CANCELLED" :foreground "green"
                                    :weight bold)))
         :config
         (add-hook 'org-mode-hook (lambda ()
                                    (setq-local time-stamp-active t
                                                time-stamp-line-limit 18
                                                time-stamp-start "^#\\+last_modified: [ \t]*"
                                                time-stamp-end "$"
                                                time-stamp-format "\[%Y-%m-%d %a %H:%M\]")
                                    (add-hook 'before-save-hook 'time-stamp nil 'local))))
       (use-package org-capture
         :after org
         :if (file-directory-p my:d:gtd)
         :commands (org-capture)
         :config
         (setq org-capture-templates `(("i" " Inbox" entry (file+headline org-gtd-file "Inbox")
                                        "** %^{Brief Description}"))))
       (use-package org-appear
         :ensure t
         :hook (org-mode-hook . org-appear-mode)
         :custom
         (org-hide-emphasis-markers t)
         (org-appear-inside-latex   t)
         (org-appear-autosubmarkers t))
     #+end_src
**** org-pomodoro
     #+begin_src emacs-lisp
       (use-package org-pomodoro
         :ensure t
         :after org
         :if (file-directory-p my:d:gtd)
         :custom
         (org-pomodoro-length 50)
         (org-promodoro-short-break-length 10))
     #+end_src
**** org-roam
     #+begin_src emacs-lisp
       (use-package org-roam
         :ensure t
         :after org
         :if (file-directory-p my:d:org-roam)
         :bind
         (("C-c n a" . org-roam-alias-add)
          ("C-c n f" . org-roam-node-find)
          ("C-c n i" . org-roam-node-insert)
          ("C-c n o" . org-id-get-create)
          ("C-c n t" . org-roam-tag-add)
          ("C-c n r" . org-roam-ref-add)
          ("C-c n l" . org-roam-buffer-toggle)
          ("C-c n c" . org-roam-capture)
          ("C-c n j" . org-roam-dailies-capture-today)
          ("C-c n d" . org-roam-dailies-find-date)
          ("C-c C-g t" . org-roam-dailies-find-today)
          )
         :init
         (setq org-roam-directory my:d:org-roam)
         (setq org-roam-dailies-directory "daily_notes/")
         (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
         :custom
         ;; (org-roam-node-display-template . (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
         (org-roam-capture-templates  '(("s" "seed" plain "%?"
                                         :if-new (file+head "seed/${slug}.org"
                                                            "#+title: ${title}\n#+date: %U\n#+last_modified: %U\n#+hugo_auto_set_lastmod: t\n#+hugo_slug: ${id}\n#+hugo_draft: true\n")
                                         :immediate-finish t
                                         :unnarrowed t)
                                        ("r" "reference" plain "%?"
                                         :if-new
                                         (file+head "reference/${slug}.org" "#+title: ${title}\n#+date: %U\n#+last_modified: %U\n#+hugo_auto_set_lastmod: t\n#+hugo_slug: ${id}\n#+hugo_draft: true\n")
                                         :immediate-finish t
                                         :unnarrowed t)
                                        ("e" "evergreen" plain "%?"
                                         :if-new
                                         (file+head "evergreen/${slug}.org" "#+title: ${title}\n#+date: %U\n#+last_modified: %U\n#+hugo_auto_set_lastmod: t\n#+hugo_slug: ${id}\n#+hugo_draft: true\n#+filetags: :envergreen:\n")
                                         :immediate-finish t
                                         :unnarrowed t)))
         (org-roam-dailies-capture-templates  '(("j" "journal" entry
                                                 "** %<%H:%M> %?"
                                                 :target (file+head+olp "%<%Y-%m>.org"
                                                                        "#+title: %<%Y-%m>\n"
                                                                        ("%<%Y-%m-%d>")))))
         :config
         (cl-defmethod org-roam-node-type ((node org-roam-node))
           "Return the TYPE of NODE."
           (condition-case nil
               (file-name-nondirectory
                (directory-file-name
                 (file-name-directory
                  (file-relative-name (org-roam-node-file node) org-roam-directory))))
             (error "")))
         (setq org-roam-node-display-template
               (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
         (defun my:tag-new-node-as-draft ()
           (org-roam-tag-add '("draft")))
         (add-hook 'org-roam-capture-new-node-hook #'my:tag-new-node-as-draft)
         (org-roam-db-autosync-enable))

       (use-package org-roam-ui
         :ensure t
         :after org-roam
         :config
         (setq org-roam-ui-sync-theme t
               org-roam-ui-follow t
               org-roam-ui-update-on-save t
               org-roam-ui-open-on-start t))

       (use-package consult-org-roam
         :ensure t
         :after (consult org-roam)
         :init
         (consult-org-roam-mode 1)
         :custom
         (consult-org-roam-grep-func #'consult-ripgrep)
         :bind
         ("C-c n e" . consult-org-roam-file-find)
         ("C-c n b" . consult-org-roam-backlinks)
         ("C-c n s" . consult-org-roam-search))

       (use-package citar
         :ensure t
         :if (file-exists-p my:f:bib)
         :custom
         (citar-bibliography  my:f:bib)
         :config
         (defun my:org-roam-node-from-cite (keys-entries)
           (interactive (list (citar-select-ref :multiple nil :rebuild-cache t)))
           (let ((title (citar--format-entry-no-widths (cdr keys-entries)
                                                       "${author editor} :: ${title}")))
             (org-roam-capture- :templates
                                '(("r" "reference" plain "%?" :if-new
                                   (file+head "reference/${citekey}.org"
                                              ":PROPERTIES:
       :ROAM_REFS: [cite:@${citekey}]
       :END:
       ,#+title: ${title}\n")
                                   :immediate-finish t
                                   :unnarrowed t))
                                :info (list :citekey (car keys-entries))
                                :node (org-roam-node-create :title title)
                                :props '(:finalize find-file)))))
     #+end_src
**** ox-hugo
     #+begin_src emacs-lisp
       (use-package ox-hugo
         :ensure t
         :after org
         :if (and (file-directory-p my:d:org-roam)
                  (file-directory-p my:d:org-hugo))
         :custom
         (org-hugo-base-dir my:d:org-hugo)
         (org-hugo-default-section-directory "notes"))
     #+end_src
*** Markdown
    #+begin_src emacs-lisp
      (use-package markdown-mode
        :ensure t
        :mode (("\\.md\\'" . markdown-mode)
               ("\\.markdown\\'" . markdown-mode)
               (("README\\.md\\'" . gfm-mode)))
        :custom
        (markdown-fontify-code-blocks-natively t)
        :hook ((markdown-mode-hook . (lambda ()
                                       (setq tab-width 2)
                                       ))))
    #+end_src
*** YAML
    #+begin_src emacs-lisp
      (use-package yaml-mode
        :ensure t
        :mode (("\\.yml\\'" . yaml-mode)
               ("\\.yaml\\'" . yaml-mode))
        :commands (yaml-mode))
    #+end_src
*** TOML
    #+begin_src emacs-lisp
      (use-package toml-mode
        :ensure t
        :mode (("\\.toml\\'" . toml-mode))
        :commands (toml-mode))
    #+end_src
*** JSON
    #+begin_src emacs-lisp
      (use-package json-mode
        :ensure t
        :mode (("\\.json\\'" . json-mode))
        :commands (json-mode))
      (use-package json-reformat
        :ensure t
        :after (json-mode))
    #+end_src
* Tramp
  #+begin_src emacs-lisp
    (use-package tramp
      :init
      ;; Disable version control on tramp buffers to avoid freezes.
      (setq tramp-remote-path '(tramp-default-remote-path
                                "~/.local/bin/"))
      (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
      (setq vc-ignore-dir-regexp
            (format "\\(%s\\)\\|\\(%s\\)"
                    vc-ignore-dir-regexp
                    tramp-file-name-regexp))
      (setq tramp-default-method "ssh")
      (setq tramp-auto-save-directory
            (expand-file-name "tramp-auto-save" user-emacs-directory))
      (setq tramp-persistency-file-name
            (expand-file-name "tramp-connection-history" user-emacs-directory))
      (setq password-cache-expiry nil)
      (setq tramp-use-ssh-controlmaster-options nil)
      :config
      (customize-set-variable 'tramp-ssh-controlmaster-options
                              (concat
                               "-o ControlPath=/tmp/ssh-tramp-%%r@%%h:%%p "
                               "-o ControlMaster=auto -o ControlPersist=yes")))
  #+end_src
* Mail
** mu4e
   #+begin_src emacs-lisp
     (use-package mu4e
       :if (and (executable-find "mu") (file-directory-p my:d:nextcloud))
       :load-path (lambda () (if (eq system-type 'darwin) "/usr/local/share/emacs/site-lisp/mu/mu4e/" "/usr/share/emacs/site-lisp/mu4e/"))
       :demand t
       :bind (("C-c m" . mu4e)
              :map mu4e-minibuffer-search-query-map
              ("C-j" . skk-kakutei)
              :map mu4e-main-mode-map
              ("r" . revert-buffer))
       :config
       (setq mu4e-context-policy 'pick-first)
       (setq mu4e-headers-auto-update t)
       (setq mu4e-headers-skip-duplicates t)
       (setq mu4e-headers-sort-field :date)
       (setq mu4e-index-cleanup t)
       (setq mu4e-update-interval 300)
       (setq mu4e-attachment-dir "~/Downloads")
       (setq mu4e-change-filenames-when-moving t)
       (setq mu4e-confirm-quit nil)
       (setq mu4e-headers-visible-lines 20)
       (setq mu4e-headers-show-threads nil)
       (setq mu4e-hide-index-messages t)
       (setq message-citation-line-format "%N @ %Y-%m-%d %H:%M :\n")
       ;; M-x find-function RET message-citation-line-format for docs:
       (setq message-citation-line-function 'message-insert-formatted-citation-line)
       (setq mu4e-headers-include-related nil)
       (setq mu4e-headers-show-threads nil)
                                             ; https://github.com/djcb/mu/issues/1136#issuecomment-1229005006
       (setf (plist-get (alist-get 'trash mu4e-marks) :action)
             (lambda (docid msg target)
               (mu4e--server-move docid (mu4e--mark-check-target target) "-N"))) ; Instead of "+T-N"
       (load (expand-file-name "personal_config/emacs_mail/config.el" my:d:nextcloud)) ; mail server config
       )
   #+end_src

   #+begin_src emacs-lisp
     (use-package mu4e-alert
       :ensure t
       :if (and (executable-find "mu") (file-directory-p my:d:nextcloud))
       :config
       (if (eq system-type 'darwin) (mu4e-alert-set-default-style 'notifier) (mu4e-alert-set-default-style 'libnotify))
       (mu4e-alert-enable-mode-line-display)
       (mu4e-alert-enable-notifications)
       )

   #+end_src

* Shell
  #+begin_src emacs-lisp
    (use-package vterm
      :ensure t
      :custom
      (vterm-keymap-exceptions  '("C-c" "C-x" "C-u" "C-t" "C-h" "C-l" "M-x" "M-o" "C-v" "M-v" "C-y" "M-y"))
      :bind (:map vterm-mode-map
                  ("C-h" . vterm-send-backspace)))
    (use-package vterm-toggle
      :ensure t
      :config
      (setq vterm-toggle-fullscreen-p nil)
      (add-to-list 'display-buffer-alist
                   '((lambda (buffer-or-name _)
                       (let ((buffer (get-buffer buffer-or-name)))
                         (with-current-buffer buffer
                           (or (equal major-mode 'vterm-mode)
                               (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                     (display-buffer-reuse-window display-buffer-in-side-window)
                     (side . bottom)
                     ;;(dedicated . t) ;dedicated is supported in emacs27
                     (reusable-frames . visible)
                     (window-height . 0.3)))
      ;; :bind ("C-t" . vterm-toggle))
      )
  #+end_src
* External Collaboration
** atomic-chrome
   #+begin_src emacs-lisp
     (use-package atomic-chrome
       :ensure t
       :if (display-graphic-p)
       :config
       (atomic-chrome-start-server)
       )
   #+end_src
